{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"define",
				"defineProperties(...)"
			],
			[
				"selec",
				"selectedField"
			],
			[
				"pre",
				"precision_num"
			],
			[
				"Calc",
				"CalcThompson"
			],
			[
				"va",
				"valueIndex"
			],
			[
				"CalcT",
				"CalcThompson"
			],
			[
				"inpt",
				"inputElements"
			],
			[
				"__De",
				"__delay_us"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"js_sys",
				"js_syscallerror_data"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"JS_New",
				"JS_NewInt32"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACmBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKFt2YWx1ZXNdKQogIHYgPT4KKHIsdikgPT4KQ29pbFR1cm5zKEwsIGZvcm0sIGlubmVyLCBvdXRlcikKQ29pbEluZHVjdGFuY2UobiwgZm9ybSwgbGVuKQpPbklucHV0KHsgdGFyZ2V0IH0pCkdldFByb3BzKGNzc1N0eWxlKQogIG5hbWUgPT4KR2V0QXR0cmlidXRlcyhlKQogIG5hbWUgPT4KSXNSYW5nZShmaWVsZElkKQpGaWVsZEluZGV4KGFyZykKU2F2ZUNvbmZpZygpCkxvYWRDb25maWcoKQpGaWVsZEVsZW1lbnRzKG4pCkdldEZpZWxkKG4pCiAgZSA9PgpTZXRGaWVsZChuLCB2KQogIGUgPT4KU2VsZWN0RmllbGQoaSkKKGUsIHgpID0+Ckd1ZXNzRmllbGQoKQogIHYgPT4KR2V0U2VsZWN0ZWQoKQogIGUgPT4KR2V0UmFuZ2UobmFtZSkKU2V0UmFuZ2UobmFtZSwgdmFsdWUpCkNhbGNUaG9tcHNvbigpCkZvcm1hdFJhbmdlKGFyZywgdW5pdCkKKGEsIGIpID0+CihuLCBpKSA9PgpDYWxjRnJlcXVlbmN5KCkKQ2FsY0luZHVjdGFuY2UoKQpDYWxjQ2FwYWNpdGFuY2UoKQpDbGVhclZhbHVlcyhpZHgpClByb2Nlc3NWYWx1ZSh2YWx1ZSwgbmFtZSkKUGFyc2VSYW5nZSh2YWx1ZSkKUGFyc2VOdW1iZXIodmFsdWUpClBhcnNlVmFsdWUodmFsdWUsIG5hbWUpClJlYWRGaWVsZHMobmFtZSkKKHsgbmFtZSwgdmFsdWUgfSwgaSkgPT4KRm9ybWF0TnVtYmVyKGFyZywgdW5pdCwgZm4gPSAncm91bmQnLCByb3VuZCA9IAopClNldFN0YXR1cyhzdHIsIHQxID0gMzAwMCwgdDIgPSAxMDAwKQpTZXR1cEZpZWxkcygpCigpID0+CihhLCBpKSA9PgogIGUgPT4KZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgpHZXRTaXplKCkKR2V0TWF4U2l6ZSgpCiAgZSA9PgogIHYgPT4KQ2hhbmdlU2l6ZShzeiA9IAopCihlLCBpKSA9PgpDaGFuZ2VQcmVjaXNpb24ocCkKSW5pdCgpCihlLCBpKSA9PgpldmVudCA9PgpldmVudCA9PgogIGUgPT4KKHsgdGFyZ2V0LCBkZWx0YVkgfSkgPT4KKHYsIGkpID0+CigpID0+Ck51bWVyaWNWYWx1ZShbbnVtLCBleHBdKQpXYWl0Rm9yKG1zKQogIHJlc29sdmUgPT4KUmVtb3ZlQWxsQ2hpbGRyZW4oZSkKUGFydGl0aW9uQXJyYXkoYSwgc2l6ZSkKRXhwb25lbnQobnVtKQpUaG91c2FuZChleHBvbmVudCwgZm4gPSAnZmxvb3InKQpFeHAyVW5pdChleHBvbmVudCwgZm4gPSAnZmxvb3InKQpVbml0KHN0cikKKFthXSkgPT4KUm91bmRUbyhwcmVjID0gY29uZmlnLnByZWNpc2lvbikKbiA9PgpJc051bWJlcihhcmcpCklzU3RyaW5nKGFyZykKQ29weVRvQ2xpcGJvYXJkKHN0cikKUmVjdCh7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSkKUmVjdApSZWN0CigpClJlY3QKICBnZXQoKQogIGdldCgpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1318
							],
							[
								1345,
								1349
							],
							[
								1377,
								1386
							],
							[
								1704,
								1745
							],
							[
								2308,
								2345
							],
							[
								2599,
								2628
							],
							[
								2974,
								3002
							],
							[
								3051,
								3058
							],
							[
								3094,
								3120
							],
							[
								3177,
								3184
							],
							[
								3226,
								3252
							],
							[
								3349,
								3374
							],
							[
								3548,
								3570
							],
							[
								3766,
								3788
							],
							[
								3906,
								3931
							],
							[
								4028,
								4049
							],
							[
								4094,
								4098
							],
							[
								4164,
								4188
							],
							[
								4233,
								4237
							],
							[
								4299,
								4323
							],
							[
								4461,
								4470
							],
							[
								4663,
								4685
							],
							[
								4712,
								4716
							],
							[
								4799,
								4822
							],
							[
								4855,
								4859
							],
							[
								4923,
								4947
							],
							[
								5540,
								5571
							],
							[
								6140,
								6164
							],
							[
								6579,
								6611
							],
							[
								6646,
								6655
							],
							[
								6761,
								6770
							],
							[
								6895,
								6920
							],
							[
								7197,
								7223
							],
							[
								7497,
								7524
							],
							[
								7798,
								7824
							],
							[
								7951,
								7986
							],
							[
								8149,
								8176
							],
							[
								8382,
								8410
							],
							[
								8458,
								8491
							],
							[
								8893,
								8919
							],
							[
								9020,
								9043
							],
							[
								9286,
								9342
							],
							[
								9351,
								9352
							],
							[
								9733,
								9784
							],
							[
								10251,
								10274
							],
							[
								10321,
								10326
							],
							[
								10435,
								10444
							],
							[
								10473,
								10477
							],
							[
								10505,
								10510
							],
							[
								10543,
								10547
							],
							[
								10579,
								10589
							],
							[
								10717,
								10727
							],
							[
								10903,
								10922
							],
							[
								10961,
								10983
							],
							[
								11054,
								11058
							],
							[
								11079,
								11083
							],
							[
								11108,
								11134
							],
							[
								11146,
								11147
							],
							[
								11194,
								11203
							],
							[
								11242,
								11270
							],
							[
								11442,
								11458
							],
							[
								11576,
								11585
							],
							[
								11805,
								11814
							],
							[
								12009,
								12018
							],
							[
								12161,
								12165
							],
							[
								12197,
								12221
							],
							[
								12520,
								12529
							],
							[
								12899,
								12904
							],
							[
								12934,
								12968
							],
							[
								13014,
								13035
							],
							[
								13059,
								13069
							],
							[
								13105,
								13135
							],
							[
								13212,
								13246
							],
							[
								13328,
								13351
							],
							[
								13401,
								13443
							],
							[
								13521,
								13563
							],
							[
								14111,
								14130
							],
							[
								14270,
								14278
							],
							[
								14970,
								15012
							],
							[
								15023,
								15028
							],
							[
								15088,
								15111
							],
							[
								15156,
								15179
							],
							[
								15225,
								15260
							],
							[
								15357,
								15395
							],
							[
								15454,
								15458
							],
							[
								15474,
								15478
							],
							[
								15507,
								15520
							],
							[
								15623,
								15627
							],
							[
								15653,
								15658
							],
							[
								15718,
								15723
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps([values])",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AQAAAAAAAAAAAAAApwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					28,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1318
							],
							[
								1345,
								1349
							],
							[
								1377,
								1386
							],
							[
								1704,
								1745
							],
							[
								2308,
								2345
							],
							[
								2599,
								2628
							],
							[
								2974,
								3002
							],
							[
								3051,
								3058
							],
							[
								3094,
								3120
							],
							[
								3177,
								3184
							],
							[
								3226,
								3252
							],
							[
								3349,
								3374
							],
							[
								3548,
								3570
							],
							[
								3766,
								3788
							],
							[
								3906,
								3931
							],
							[
								4028,
								4049
							],
							[
								4094,
								4098
							],
							[
								4164,
								4188
							],
							[
								4233,
								4237
							],
							[
								4299,
								4323
							],
							[
								4461,
								4470
							],
							[
								4663,
								4685
							],
							[
								4712,
								4716
							],
							[
								4799,
								4822
							],
							[
								4855,
								4859
							],
							[
								4923,
								4947
							],
							[
								5540,
								5571
							],
							[
								6140,
								6164
							],
							[
								6579,
								6611
							],
							[
								6646,
								6655
							],
							[
								6761,
								6770
							],
							[
								6895,
								6920
							],
							[
								7197,
								7223
							],
							[
								7497,
								7524
							],
							[
								7798,
								7824
							],
							[
								7951,
								7986
							],
							[
								8149,
								8176
							],
							[
								8382,
								8410
							],
							[
								8458,
								8491
							],
							[
								8893,
								8919
							],
							[
								9020,
								9043
							],
							[
								9286,
								9342
							],
							[
								9351,
								9352
							],
							[
								9733,
								9784
							],
							[
								10251,
								10274
							],
							[
								10321,
								10326
							],
							[
								10435,
								10444
							],
							[
								10473,
								10477
							],
							[
								10505,
								10510
							],
							[
								10543,
								10547
							],
							[
								10579,
								10589
							],
							[
								10717,
								10727
							],
							[
								10903,
								10922
							],
							[
								10961,
								10983
							],
							[
								11054,
								11058
							],
							[
								11079,
								11083
							],
							[
								11108,
								11134
							],
							[
								11146,
								11147
							],
							[
								11194,
								11203
							],
							[
								11242,
								11270
							],
							[
								11442,
								11458
							],
							[
								11576,
								11585
							],
							[
								11805,
								11814
							],
							[
								12009,
								12018
							],
							[
								12161,
								12165
							],
							[
								12197,
								12221
							],
							[
								12520,
								12529
							],
							[
								12899,
								12904
							],
							[
								12934,
								12968
							],
							[
								13014,
								13035
							],
							[
								13059,
								13069
							],
							[
								13105,
								13135
							],
							[
								13212,
								13246
							],
							[
								13328,
								13351
							],
							[
								13401,
								13443
							],
							[
								13521,
								13563
							],
							[
								14111,
								14130
							],
							[
								14270,
								14278
							],
							[
								14970,
								15012
							],
							[
								15023,
								15028
							],
							[
								15088,
								15111
							],
							[
								15156,
								15179
							],
							[
								15225,
								15260
							],
							[
								15357,
								15395
							],
							[
								15454,
								15458
							],
							[
								15474,
								15478
							],
							[
								15507,
								15520
							],
							[
								15623,
								15627
							],
							[
								15653,
								15658
							],
							[
								15718,
								15723
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps([values])",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAACnBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKFt2YWx1ZXNdKQogIHYgPT4KKHIsIHYpID0+CkNvaWxUdXJucyhMLCBmb3JtLCBpbm5lciwgb3V0ZXIpCkNvaWxJbmR1Y3RhbmNlKG4sIGZvcm0sIGxlbikKT25JbnB1dCh7IHRhcmdldCB9KQpHZXRQcm9wcyhjc3NTdHlsZSkKICBuYW1lID0+CkdldEF0dHJpYnV0ZXMoZSkKICBuYW1lID0+CklzUmFuZ2UoZmllbGRJZCkKRmllbGRJbmRleChhcmcpClNhdmVDb25maWcoKQpMb2FkQ29uZmlnKCkKRmllbGRFbGVtZW50cyhuKQpHZXRGaWVsZChuKQogIGUgPT4KU2V0RmllbGQobiwgdikKICBlID0+ClNlbGVjdEZpZWxkKGkpCihlLCB4KSA9PgpHdWVzc0ZpZWxkKCkKICB2ID0+CkdldFNlbGVjdGVkKCkKICBlID0+CkdldFJhbmdlKG5hbWUpClNldFJhbmdlKG5hbWUsIHZhbHVlKQpDYWxjVGhvbXBzb24oKQpGb3JtYXRSYW5nZShhcmcsIHVuaXQpCihhLCBiKSA9PgoobiwgaSkgPT4KQ2FsY0ZyZXF1ZW5jeSgpCkNhbGNJbmR1Y3RhbmNlKCkKQ2FsY0NhcGFjaXRhbmNlKCkKQ2xlYXJWYWx1ZXMoaWR4KQpQcm9jZXNzVmFsdWUodmFsdWUsIG5hbWUpClBhcnNlUmFuZ2UodmFsdWUpClBhcnNlTnVtYmVyKHZhbHVlKQpQYXJzZVZhbHVlKHZhbHVlLCBuYW1lKQpSZWFkRmllbGRzKG5hbWUpCih7IG5hbWUsIHZhbHVlIH0sIGkpID0+CkZvcm1hdE51bWJlcihhcmcsIHVuaXQsIGZuID0gJ3JvdW5kJywgcm91bmQgPSAKKQpTZXRTdGF0dXMoc3RyLCB0MSA9IDMwMDAsIHQyID0gMTAwMCkKU2V0dXBGaWVsZHMoKQooKSA9PgooYSwgaSkgPT4KICBlID0+CmUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KR2V0U2l6ZSgpCkdldE1heFNpemUoKQogIGUgPT4KICB2ID0+CkNoYW5nZVNpemUoc3ogPSAKKQooZSwgaSkgPT4KQ2hhbmdlUHJlY2lzaW9uKHApCkluaXQoKQooZSwgaSkgPT4KZXZlbnQgPT4KZXZlbnQgPT4KICBlID0+Cih7IHRhcmdldCwgZGVsdGFZIH0pID0+Cih2LCBpKSA9PgooKSA9PgpOdW1lcmljVmFsdWUoW251bSwgZXhwXSkKV2FpdEZvcihtcykKICByZXNvbHZlID0+ClJlbW92ZUFsbENoaWxkcmVuKGUpClBhcnRpdGlvbkFycmF5KGEsIHNpemUpCkV4cG9uZW50KG51bSkKVGhvdXNhbmQoZXhwb25lbnQsIGZuID0gJ2Zsb29yJykKRXhwMlVuaXQoZXhwb25lbnQsIGZuID0gJ2Zsb29yJykKVW5pdChzdHIpCihbYV0pID0+ClJvdW5kVG8ocHJlYyA9IGNvbmZpZy5wcmVjaXNpb24pCm4gPT4KSXNOdW1iZXIoYXJnKQpJc1N0cmluZyhhcmcpCkNvcHlUb0NsaXBib2FyZChzdHIpClJlY3QoeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0pClJlY3QKUmVjdAooKQpSZWN0CiAgZ2V0KCkKICBnZXQoKQAAAAAAAAAApwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKcFAABRID0gcyA9PgpRQSA9ICguLi5hKSA9PgpHUyA9IHMgPT4KR0EgPSBzID0+CkdSID0gcyA9PgogIGNhbGN1bGF0ZTogKEwsIEMpID0+CiAgaW52ZXJzZTogKGYsIExDKSA9PgooKSA9PgogIHJvc2FLbSA9IGUgPT4KICByb3NhS3MgPSBlID0+ClNlcmllc0NhcHMoW3ZhbHVlc10pCiAgdiA9PgoociwgdikgPT4KQ29pbFR1cm5zKEwsIGZvcm0sIGlubmVyLCBvdXRlcikKQ29pbEluZHVjdGFuY2UobiwgZm9ybSwgbGVuKQpPbklucHV0KHsgdGFyZ2V0IH0pCkdldFByb3BzKGNzc1N0eWxlKQogIG5hbWUgPT4KR2V0QXR0cmlidXRlcyhlKQogIG5hbWUgPT4KSXNSYW5nZShmaWVsZElkKQpGaWVsZEluZGV4KGFyZykKU2F2ZUNvbmZpZygpCkxvYWRDb25maWcoKQpGaWVsZEVsZW1lbnRzKG4pCkdldEZpZWxkKG4pCiAgZSA9PgpTZXRGaWVsZChuLCB2KQogIGUgPT4KU2VsZWN0RmllbGQoaSkKKGUsIHgpID0+Ckd1ZXNzRmllbGQoKQogIHYgPT4KR2V0U2VsZWN0ZWQoKQogIGUgPT4KR2V0UmFuZ2UobmFtZSkKU2V0UmFuZ2UobmFtZSwgdmFsdWUpCkNhbGNUaG9tcHNvbigpCkZvcm1hdFJhbmdlKGFyZywgdW5pdCkKKGEsIGIpID0+CihuLCBpKSA9PgpDYWxjRnJlcXVlbmN5KCkKQ2FsY0luZHVjdGFuY2UoKQpDYWxjQ2FwYWNpdGFuY2UoKQpDbGVhclZhbHVlcyhpZHgpClByb2Nlc3NWYWx1ZSh2YWx1ZSwgbmFtZSkKUGFyc2VSYW5nZSh2YWx1ZSkKUGFyc2VOdW1iZXIodmFsdWUpClBhcnNlVmFsdWUodmFsdWUsIG5hbWUpClJlYWRGaWVsZHMobmFtZSkKKHsgbmFtZSwgdmFsdWUgfSwgaSkgPT4KRm9ybWF0TnVtYmVyKGFyZywgdW5pdCwgZm4gPSAncm91bmQnLCByb3VuZCA9IAopClNldFN0YXR1cyhzdHIsIHQxID0gMzAwMCwgdDIgPSAxMDAwKQpTZXR1cEZpZWxkcygpCigpID0+CihhLCBpKSA9PgogIGUgPT4KZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgpHZXRTaXplKCkKR2V0TWF4U2l6ZSgpCiAgZSA9PgogIHYgPT4KQ2hhbmdlU2l6ZShzeiA9IAopCihlLCBpKSA9PgpDaGFuZ2VQcmVjaXNpb24ocCkKSW5pdCgpCihlLCBpKSA9PgpldmVudCA9PgpldmVudCA9PgogIGUgPT4KKHsgdGFyZ2V0LCBkZWx0YVkgfSkgPT4KKHYsIGkpID0+CigpID0+Ck51bWVyaWNWYWx1ZShbbnVtLCBleHBdKQpXYWl0Rm9yKG1zKQogIHJlc29sdmUgPT4KUmVtb3ZlQWxsQ2hpbGRyZW4oZSkKUGFydGl0aW9uQXJyYXkoYSwgc2l6ZSkKRXhwb25lbnQobnVtKQpUaG91c2FuZChleHBvbmVudCwgZm4gPSAnZmxvb3InKQpFeHAyVW5pdChleHBvbmVudCwgZm4gPSAnZmxvb3InKQpVbml0KHN0cikKKFthXSkgPT4KUm91bmRUbyhwcmVjID0gY29uZmlnLnByZWNpc2lvbikKbiA9PgpJc051bWJlcihhcmcpCklzU3RyaW5nKGFyZykKQ29weVRvQ2xpcGJvYXJkKHN0cikKUmVjdCh7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSkKUmVjdApSZWN0CigpClJlY3QKICBnZXQoKQogIGdldCgpAAAAAAAAAACnBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApwUAAFEgPSBzID0+ClFBID0gKC4uLmEpID0+CkdTID0gcyA9PgpHQSA9IHMgPT4KR1IgPSBzID0+CiAgY2FsY3VsYXRlOiAoTCwgQykgPT4KICBpbnZlcnNlOiAoZiwgTEMpID0+CigpID0+CiAgcm9zYUttID0gZSA9PgogIHJvc2FLcyA9IGUgPT4KU2VyaWVzQ2FwcyhbdmFsdWVzXSkKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAKcFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKFt2YWx1ZXNdKQogIHYgPT4KKHIsIHYpID0+CkNvaWxUdXJucyhMLCBmb3JtLCBpbm5lciwgb3V0ZXIpCkNvaWxJbmR1Y3RhbmNlKG4sIGZvcm0sIGxlbikKT25JbnB1dCh7IHRhcmdldCB9KQpHZXRQcm9wcyhjc3NTdHlsZSkKICBuYW1lID0+CkdldEF0dHJpYnV0ZXMoZSkKICBuYW1lID0+CklzUmFuZ2UoZmllbGRJZCkKRmllbGRJbmRleChhcmcpClNhdmVDb25maWcoKQpMb2FkQ29uZmlnKCkKRmllbGRFbGVtZW50cyhuKQpHZXRGaWVsZChuKQogIGUgPT4KU2V0RmllbGQobiwgdikKICBlID0+ClNlbGVjdEZpZWxkKGkpCihlLCB4KSA9PgpHdWVzc0ZpZWxkKCkKICB2ID0+CkdldFNlbGVjdGVkKCkKICBlID0+CkdldFJhbmdlKG5hbWUpClNldFJhbmdlKG5hbWUsIHZhbHVlKQpDYWxjVGhvbXBzb24oKQpGb3JtYXRSYW5nZShhcmcsIHVuaXQpCihhLCBiKSA9PgoobiwgaSkgPT4KQ2FsY0ZyZXF1ZW5jeSgpCkNhbGNJbmR1Y3RhbmNlKCkKQ2FsY0NhcGFjaXRhbmNlKCkKQ2xlYXJWYWx1ZXMoaWR4KQpQcm9jZXNzVmFsdWUodmFsdWUsIG5hbWUpClBhcnNlUmFuZ2UodmFsdWUpClBhcnNlTnVtYmVyKHZhbHVlKQpQYXJzZVZhbHVlKHZhbHVlLCBuYW1lKQpSZWFkRmllbGRzKG5hbWUpCih7IG5hbWUsIHZhbHVlIH0sIGkpID0+CkZvcm1hdE51bWJlcihhcmcsIHVuaXQsIGZuID0gJ3JvdW5kJywgcm91bmQgPSAKKQpTZXRTdGF0dXMoc3RyLCB0MSA9IDMwMDAsIHQyID0gMTAwMCkKU2V0dXBGaWVsZHMoKQooKSA9PgooYSwgaSkgPT4KICBlID0+CmUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KR2V0U2l6ZSgpCkdldE1heFNpemUoKQogIGUgPT4KICB2ID0+CkNoYW5nZVNpemUoc3ogPSAKKQooZSwgaSkgPT4KQ2hhbmdlUHJlY2lzaW9uKHApCkluaXQoKQooZSwgaSkgPT4KZXZlbnQgPT4KZXZlbnQgPT4KICBlID0+Cih7IHRhcmdldCwgZGVsdGFZIH0pID0+Cih2LCBpKSA9PgooKSA9PgpOdW1lcmljVmFsdWUoW251bSwgZXhwXSkKV2FpdEZvcihtcykKICByZXNvbHZlID0+ClJlbW92ZUFsbENoaWxkcmVuKGUpClBhcnRpdGlvbkFycmF5KGEsIHNpemUpCkV4cG9uZW50KG51bSkKVGhvdXNhbmQoZXhwb25lbnQsIGZuID0gJ2Zsb29yJykKRXhwMlVuaXQoZXhwb25lbnQsIGZuID0gJ2Zsb29yJykKVW5pdChzdHIpCihbYV0pID0+ClJvdW5kVG8ocHJlYyA9IGNvbmZpZy5wcmVjaXNpb24pCm4gPT4KSXNOdW1iZXIoYXJnKQpJc1N0cmluZyhhcmcpCkNvcHlUb0NsaXBib2FyZChzdHIpClJlY3QoeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0pClJlY3QKUmVjdAooKQpSZWN0CiAgZ2V0KCkKICBnZXQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1318
							],
							[
								1345,
								1349
							],
							[
								1377,
								1386
							],
							[
								1704,
								1745
							],
							[
								2308,
								2345
							],
							[
								2599,
								2628
							],
							[
								2974,
								3002
							],
							[
								3051,
								3058
							],
							[
								3094,
								3120
							],
							[
								3177,
								3184
							],
							[
								3226,
								3252
							],
							[
								3349,
								3374
							],
							[
								3548,
								3570
							],
							[
								3766,
								3788
							],
							[
								3906,
								3931
							],
							[
								4028,
								4049
							],
							[
								4094,
								4098
							],
							[
								4164,
								4188
							],
							[
								4233,
								4237
							],
							[
								4299,
								4323
							],
							[
								4461,
								4470
							],
							[
								4663,
								4685
							],
							[
								4712,
								4716
							],
							[
								4799,
								4822
							],
							[
								4855,
								4859
							],
							[
								4923,
								4947
							],
							[
								5540,
								5571
							],
							[
								6140,
								6164
							],
							[
								6579,
								6611
							],
							[
								6646,
								6655
							],
							[
								6761,
								6770
							],
							[
								6895,
								6920
							],
							[
								7197,
								7223
							],
							[
								7497,
								7524
							],
							[
								7798,
								7824
							],
							[
								7951,
								7986
							],
							[
								8149,
								8176
							],
							[
								8382,
								8410
							],
							[
								8458,
								8491
							],
							[
								8893,
								8919
							],
							[
								9020,
								9043
							],
							[
								9286,
								9342
							],
							[
								9351,
								9352
							],
							[
								9733,
								9784
							],
							[
								10251,
								10274
							],
							[
								10321,
								10326
							],
							[
								10435,
								10444
							],
							[
								10473,
								10477
							],
							[
								10505,
								10510
							],
							[
								10543,
								10547
							],
							[
								10579,
								10589
							],
							[
								10717,
								10727
							],
							[
								10903,
								10922
							],
							[
								10961,
								10983
							],
							[
								11054,
								11058
							],
							[
								11079,
								11083
							],
							[
								11108,
								11134
							],
							[
								11146,
								11147
							],
							[
								11194,
								11203
							],
							[
								11242,
								11270
							],
							[
								11442,
								11458
							],
							[
								11576,
								11585
							],
							[
								11805,
								11814
							],
							[
								12009,
								12018
							],
							[
								12161,
								12165
							],
							[
								12197,
								12221
							],
							[
								12520,
								12529
							],
							[
								12899,
								12904
							],
							[
								12934,
								12968
							],
							[
								13014,
								13035
							],
							[
								13059,
								13069
							],
							[
								13105,
								13135
							],
							[
								13212,
								13246
							],
							[
								13328,
								13351
							],
							[
								13401,
								13443
							],
							[
								13521,
								13563
							],
							[
								14111,
								14130
							],
							[
								14270,
								14278
							],
							[
								14970,
								15012
							],
							[
								15023,
								15028
							],
							[
								15088,
								15111
							],
							[
								15156,
								15179
							],
							[
								15225,
								15260
							],
							[
								15357,
								15395
							],
							[
								15454,
								15458
							],
							[
								15474,
								15478
							],
							[
								15507,
								15520
							],
							[
								15623,
								15627
							],
							[
								15653,
								15658
							],
							[
								15718,
								15723
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps([values])",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AQAAAAAAAAAAAAAApwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKFt2YWx1ZXNdKQogIHYgPT4KKHIsIHYpID0+CkNvaWxUdXJucyhMLCBmb3JtLCBpbm5lciwgb3V0ZXIpCkNvaWxJbmR1Y3RhbmNlKG4sIGZvcm0sIGxlbikKT25JbnB1dCh7IHRhcmdldCB9KQpHZXRQcm9wcyhjc3NTdHlsZSkKICBuYW1lID0+CkdldEF0dHJpYnV0ZXMoZSkKICBuYW1lID0+CklzUmFuZ2UoZmllbGRJZCkKRmllbGRJbmRleChhcmcpClNhdmVDb25maWcoKQpMb2FkQ29uZmlnKCkKRmllbGRFbGVtZW50cyhuKQpHZXRGaWVsZChuKQogIGUgPT4KU2V0RmllbGQobiwgdikKICBlID0+ClNlbGVjdEZpZWxkKGkpCihlLCB4KSA9PgpHdWVzc0ZpZWxkKCkKICB2ID0+CkdldFNlbGVjdGVkKCkKICBlID0+CkdldFJhbmdlKG5hbWUpClNldFJhbmdlKG5hbWUsIHZhbHVlKQpDYWxjVGhvbXBzb24oKQpGb3JtYXRSYW5nZShhcmcsIHVuaXQpCihhLCBiKSA9PgoobiwgaSkgPT4KQ2FsY0ZyZXF1ZW5jeSgpCkNhbGNJbmR1Y3RhbmNlKCkKQ2FsY0NhcGFjaXRhbmNlKCkKQ2xlYXJWYWx1ZXMoaWR4KQpQcm9jZXNzVmFsdWUodmFsdWUsIG5hbWUpClBhcnNlUmFuZ2UodmFsdWUpClBhcnNlTnVtYmVyKHZhbHVlKQpQYXJzZVZhbHVlKHZhbHVlLCBuYW1lKQpSZWFkRmllbGRzKG5hbWUpCih7IG5hbWUsIHZhbHVlIH0sIGkpID0+CkZvcm1hdE51bWJlcihhcmcsIHVuaXQsIGZuID0gJ3JvdW5kJywgcm91bmQgPSAKKQpTZXRTdGF0dXMoc3RyLCB0MSA9IDMwMDAsIHQyID0gMTAwMCkKU2V0dXBGaWVsZHMoKQooKSA9PgooYSwgaSkgPT4KICBlID0+CmUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KR2V0U2l6ZSgpCkdldE1heFNpemUoKQogIGUgPT4KICB2ID0+CkNoYW5nZVNpemUoc3ogPSAKKQooZSwgaSkgPT4KQ2hhbmdlUHJlY2lzaW9uKHApCkluaXQoKQooZSwgaSkgPT4KZXZlbnQgPT4KZXZlbnQgPT4KICBlID0+Cih7IHRhcmdldCwgZGVsdGFZIH0pID0+Cih2LCBpKSA9PgooKSA9PgpOdW1lcmljVmFsdWUoW251bSwgZXhwXSkKV2FpdEZvcihtcykKICByZXNvbHZlID0+ClJlbW92ZUFsbENoaWxkcmVuKGUpClBhcnRpdGlvbkFycmF5KGEsIHNpemUpCkV4cG9uZW50KG51bSkKVGhvdXNhbmQoZXhwb25lbnQsIGZuID0gJ2Zsb29yJykKRXhwMlVuaXQoZXhwb25lbnQsIGZuID0gJ2Zsb29yJykKVW5pdChzdHIpCihbYV0pID0+ClJvdW5kVG8ocHJlYyA9IGNvbmZpZy5wcmVjaXNpb24pCm4gPT4KSXNOdW1iZXIoYXJnKQpJc1N0cmluZyhhcmcpCkNvcHlUb0NsaXBib2FyZChzdHIpClJlY3QoeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0pClJlY3QKUmVjdAooKQpSZWN0CiAgZ2V0KCkKICBnZXQoKQAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js.orig",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AQAAAAAAAAAAAAAABgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js.rej",
						"symkeys":
						[
							[
								33,
								48
							]
						],
						"symlist":
						[
							"-227,26 +230,50"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAADwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAALTIyNywyNiArMjMwLDUwAAAAAAAAAAAGAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/tlite.js",
						"symkeys":
						[
							[
								6,
								37
							],
							[
								80,
								92
							],
							[
								299,
								333
							],
							[
								440,
								468
							],
							[
								622,
								641
							],
							[
								861,
								884
							],
							[
								922,
								953
							],
							[
								1188,
								1209
							],
							[
								1376,
								1416
							],
							[
								1672,
								1702
							],
							[
								3243,
								3271
							]
						],
						"symlist":
						[
							" function tlite(getTooltipOpts)",
							" function(e)",
							".show = function(el, opts, isAuto)",
							" function Tooltip(el, opts)",
							" function show()",
							" function autoHide()",
							" function hide(isAutoHiding)",
							" function fadeIn()",
							" function createTooltip(el, text, opts)",
							" function positionTooltip()",
							".hide = function(el, isAuto)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICB0bGl0ZShnZXRUb29sdGlwT3B0cykKZnVuY3Rpb24oZSkKICAuc2hvdyA9IGZ1bmN0aW9uKGVsLCBvcHRzLCBpc0F1dG8pClRvb2x0aXAoZWwsIG9wdHMpCiAgc2hvdygpCiAgYXV0b0hpZGUoKQogIGhpZGUoaXNBdXRvSGlkaW5nKQogIGZhZGVJbigpCiAgY3JlYXRlVG9vbHRpcChlbCwgdGV4dCwgb3B0cykKICBwb3NpdGlvblRvb2x0aXAoKQogIC5oaWRlID0gZnVuY3Rpb24oZWwsIGlzQXV0bykAAAAAAAAAAKUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/stylesheets/tlite.css",
						"symkeys":
						[
							[
								0,
								6
							],
							[
								420,
								452
							],
							[
								480,
								494
							],
							[
								539,
								553
							],
							[
								697,
								713
							],
							[
								766,
								783
							],
							[
								816,
								833
							],
							[
								867,
								883
							],
							[
								939,
								956
							],
							[
								993,
								1010
							],
							[
								1046,
								1062
							],
							[
								1114,
								1130
							]
						],
						"symlist":
						[
							".tlite",
							".tlite-table td, .tlite-table th",
							".tlite-visible",
							".tlite::before",
							".tlite-n::before",
							".tlite-nw::before",
							".tlite-ne::before",
							".tlite-s::before",
							".tlite-se::before",
							".tlite-sw::before",
							".tlite-w::before",
							".tlite-e::before"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAOkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAAAAICAudGxpdGUKICAudGxpdGUtdGFibGUgdGQsIC50bGl0ZS10YWJsZSB0aAogIC50bGl0ZS12aXNpYmxlCiAgLnRsaXRlOjpiZWZvcmUKICAudGxpdGUtbjo6YmVmb3JlCiAgLnRsaXRlLW53OjpiZWZvcmUKICAudGxpdGUtbmU6OmJlZm9yZQogIC50bGl0ZS1zOjpiZWZvcmUKICAudGxpdGUtc2U6OmJlZm9yZQogIC50bGl0ZS1zdzo6YmVmb3JlCiAgLnRsaXRlLXc6OmJlZm9yZQogIC50bGl0ZS1lOjpiZWZvcmUAAAAAAAAAAKUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/helpers/window.js",
						"symkeys":
						[
							[
								334,
								353
							],
							[
								590,
								605
							],
							[
								913,
								939
							],
							[
								1136,
								1181
							],
							[
								1427,
								1450
							],
							[
								1672,
								1715
							],
							[
								1767,
								1777
							],
							[
								2037,
								2054
							]
						],
						"symlist":
						[
							" (name, options) =>",
							"restore = () =>",
							"getCurrentPosition = () =>",
							"windowWithinBounds = (windowState, bounds) =>",
							"resetToDefaults = () =>",
							"ensureVisibleOnSomeDisplay = windowState =>",
							"display =>",
							"saveState = () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAANoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/app/main.js.map",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADaAAAAKG5hbWUsIG9wdGlvbnMpID0+CiAgcmVzdG9yZSA9ICgpID0+CiAgZ2V0Q3VycmVudFBvc2l0aW9uID0gKCkgPT4KICB3aW5kb3dXaXRoaW5Cb3VuZHMgPSAod2luZG93U3RhdGUsIGJvdW5kcykgPT4KICByZXNldFRvRGVmYXVsdHMgPSAoKSA9PgogIGVuc3VyZVZpc2libGVPblNvbWVEaXNwbGF5ID0gd2luZG93U3RhdGUgPT4KICBkaXNwbGF5ID0+CiAgc2F2ZVN0YXRlID0gKCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AQAAAAAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/app/app.js.map",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AQAAAAAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/build/webpack.app.config.js",
						"symkeys":
						[
							[
								138,
								145
							]
						],
						"symlist":
						[
							" env =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/e2e/hello_world.e2e.js",
						"symkeys":
						[
							[
								95,
								106
							],
							[
								233,
								244
							],
							[
								291,
								301
							],
							[
								340,
								347
							]
						],
						"symlist":
						[
							" function()",
							" function()",
							"element =>",
							"text =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAZW52ID0+AAAAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/e2e/utils.js",
						"symkeys":
						[
							[
								80,
								103
							],
							[
								294,
								316
							]
						],
						"symlist":
						[
							"beforeEach = function()",
							"afterEach = function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAZnVuY3Rpb24oKQpmdW5jdGlvbigpCiAgZWxlbWVudCA9PgogIHRleHQgPT4AAAAAAAAAADIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/README.md",
						"symkeys":
						[
							[
								0,
								22
							],
							[
								520,
								533
							],
							[
								786,
								812
							],
							[
								1533,
								1546
							],
							[
								1548,
								1567
							],
							[
								1588,
								1609
							],
							[
								2086,
								2101
							],
							[
								2429,
								2462
							],
							[
								3063,
								3072
							],
							[
								3107,
								3114
							],
							[
								3407,
								3420
							],
							[
								3604,
								3622
							]
						],
						"symlist":
						[
							" electron-boilerplate",
							" Quick start",
							" Structure of the project",
							" Development",
							"   Starting the app",
							"   The build pipeline",
							"   Environments",
							"   Adding npm modules to your app",
							" Testing",
							"   Unit",
							"   End to end",
							" Making a release"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAyAAAAICBiZWZvcmVFYWNoID0gZnVuY3Rpb24oKQogIGFmdGVyRWFjaCA9IGZ1bmN0aW9uKCkAAAAAAAAAAPUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/multi_layer1.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								585
							],
							[
								5787,
								5802
							],
							[
								6201,
								6217
							],
							[
								6420,
								6436
							],
							[
								6637,
								6653
							],
							[
								6854,
								6870
							],
							[
								7071,
								7087
							],
							[
								7288,
								7304
							],
							[
								7505,
								7522
							],
							[
								7736,
								7751
							],
							[
								8151,
								8170
							],
							[
								8226,
								8246
							],
							[
								8637,
								8654
							],
							[
								9511,
								9529
							],
							[
								9636,
								9654
							],
							[
								10131,
								10145
							],
							[
								10435,
								10459
							],
							[
								10715,
								10740
							],
							[
								12904,
								12916
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitD()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitc()",
							"function unitlw()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function setSWG()",
							"function odCalc(e)",
							"function clear01()",
							"function EF(e)",
							"function Mut(e, t, n, l)",
							"function FindInductance()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD1AAAAZWxlY3Ryb24tYm9pbGVycGxhdGUKICAgICBRdWljayBzdGFydAogICAgIFN0cnVjdHVyZSBvZiB0aGUgcHJvamVjdAogICAgIERldmVsb3BtZW50CiAgICAgU3RhcnRpbmcgdGhlIGFwcAogICAgIFRoZSBidWlsZCBwaXBlbGluZQogICAgIEVudmlyb25tZW50cwogICAgIEFkZGluZyBucG0gbW9kdWxlcyB0byB5b3VyIGFwcAogICAgIFRlc3RpbmcKICAgICBVbml0CiAgICAgRW5kIHRvIGVuZAogICAgIE1ha2luZyBhIHJlbGVhc2UAAAAAAAAAAOMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/yarn.lock",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEQoKQogIHVuaXRkKCkKICB1bml0cCgpCiAgdW5pdGwoKQogIHVuaXRjKCkKICB1bml0bHcoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHNldFNXRygpCiAgb2RDYWxjKGUpCiAgY2xlYXIwMSgpCkVGKGUpCk11dChlLCB0LCBuLCBsKQpGaW5kSW5kdWN0YW5jZSgpCmZ1bmN0aW9uKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/multi_layer1.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								585
							],
							[
								5787,
								5802
							],
							[
								6201,
								6217
							],
							[
								6420,
								6436
							],
							[
								6637,
								6653
							],
							[
								6854,
								6870
							],
							[
								7071,
								7087
							],
							[
								7288,
								7304
							],
							[
								7505,
								7522
							],
							[
								7736,
								7751
							],
							[
								8151,
								8170
							],
							[
								8226,
								8246
							],
							[
								8637,
								8654
							],
							[
								9511,
								9529
							],
							[
								9636,
								9654
							],
							[
								10131,
								10145
							],
							[
								10435,
								10459
							],
							[
								10715,
								10740
							],
							[
								12904,
								12916
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitD()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitc()",
							"function unitlw()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function setSWG()",
							"function odCalc(e)",
							"function clear01()",
							"function EF(e)",
							"function Mut(e, t, n, l)",
							"function FindInductance()",
							" function()"
						]
					},
					"AQAAAAAAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEQoKQogIHVuaXRkKCkKICB1bml0cCgpCiAgdW5pdGwoKQogIHVuaXRjKCkKICB1bml0bHcoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHNldFNXRygpCiAgb2RDYWxjKGUpCiAgY2xlYXIwMSgpCkVGKGUpCk11dChlLCB0LCBuLCBsKQpGaW5kSW5kdWN0YW5jZSgpCmZ1bmN0aW9uKCkAAAAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/thomson-calculator-1.0-win32-ia32.txz",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/thomson-calculator-1.0-linux-x64.txz",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/thomson-calculator-1.0-win32-ia32.txz",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/temp/e2e_entry.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/temp/e2e.js",
						"symkeys":
						[
							[
								10,
								15
							],
							[
								256,
								326
							],
							[
								765,
								777
							],
							[
								977,
								989
							],
							[
								1036,
								1046
							],
							[
								1085,
								1092
							],
							[
								1334,
								1404
							],
							[
								1541,
								1557
							],
							[
								2144,
								2168
							],
							[
								2436,
								2459
							],
							[
								2775,
								2786
							],
							[
								2959,
								2970
							],
							[
								3147,
								3158
							],
							[
								3428,
								3468
							],
							[
								4314,
								4319
							],
							[
								4435,
								4451
							],
							[
								4517,
								4527
							],
							[
								4558,
								4568
							],
							[
								4772,
								4777
							],
							[
								4868,
								4897
							],
							[
								5272,
								5277
							],
							[
								5310,
								5329
							],
							[
								5472,
								5477
							],
							[
								5553,
								5570
							],
							[
								6076,
								6081
							]
						],
						"symlist":
						[
							"() =>",
							"(__unused_webpack_module, __webpack_exports__, __webpack_require__) =>",
							" function ()",
							" function ()",
							"element =>",
							"text =>",
							"(__unused_webpack_module, __webpack_exports__, __webpack_require__) =>",
							"\"default\": () =>",
							"beforeEach = function ()",
							"afterEach = function ()",
							"(module) =>",
							"(module) =>",
							"(module) =>",
							" function __webpack_require__(moduleId)",
							"() =>",
							".n = (module) =>",
							" () =>",
							" () =>",
							"() =>",
							".d = (exports, definition) =>",
							"() =>",
							".o = (obj, prop) =>",
							"() =>",
							".r = (exports) =>",
							"() =>"
						]
					},
					"AQAAAAAAAAAAAAAAwQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/tlite.js",
						"symkeys":
						[
							[
								6,
								37
							],
							[
								80,
								92
							],
							[
								299,
								333
							],
							[
								440,
								468
							],
							[
								622,
								641
							],
							[
								861,
								884
							],
							[
								922,
								953
							],
							[
								1188,
								1209
							],
							[
								1376,
								1416
							],
							[
								1672,
								1702
							],
							[
								3243,
								3271
							]
						],
						"symlist":
						[
							" function tlite(getTooltipOpts)",
							" function(e)",
							".show = function(el, opts, isAuto)",
							" function Tooltip(el, opts)",
							" function show()",
							" function autoHide()",
							" function hide(isAutoHiding)",
							" function fadeIn()",
							" function createTooltip(el, text, opts)",
							" function positionTooltip()",
							".hide = function(el, isAuto)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAQAAKCkgPT4KKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PgooKQooKQogIGVsZW1lbnQgPT4KICB0ZXh0ID0+CihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4KImRlZmF1bHQiOiAoKSA9PgogIGJlZm9yZUVhY2ggPSBmdW5jdGlvbiAoKQogIGFmdGVyRWFjaCA9IGZ1bmN0aW9uICgpCihtb2R1bGUpID0+Cihtb2R1bGUpID0+Cihtb2R1bGUpID0+CiAgX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkKKCkgPT4KICAubiA9IChtb2R1bGUpID0+CigpID0+CigpID0+CigpID0+CiAgLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4KKCkgPT4KICAubyA9IChvYmosIHByb3ApID0+CigpID0+CiAgLnIgPSAoZXhwb3J0cykgPT4KKCkgPT4AAAAAAAAAAOMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/main.js",
						"symkeys":
						[
							[
								1011,
								1037
							],
							[
								1307,
								1322
							],
							[
								1354,
								1370
							],
							[
								1460,
								1477
							],
							[
								1535,
								1541
							],
							[
								2250,
								2256
							]
						],
						"symlist":
						[
							"setApplicationMenu = () =>",
							"initIpc = () =>",
							" (event, arg) =>",
							" (event, href) =>",
							" () =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICB0bGl0ZShnZXRUb29sdGlwT3B0cykKZnVuY3Rpb24oZSkKICAuc2hvdyA9IGZ1bmN0aW9uKGVsLCBvcHRzLCBpc0F1dG8pClRvb2x0aXAoZWwsIG9wdHMpCiAgc2hvdygpCiAgYXV0b0hpZGUoKQogIGhpZGUoaXNBdXRvSGlkaW5nKQogIGZhZGVJbigpCiAgY3JlYXRlVG9vbHRpcChlbCwgdGV4dCwgb3B0cykKICBwb3NpdGlvblRvb2x0aXAoKQogIC5oaWRlID0gZnVuY3Rpb24oZWwsIGlzQXV0bykAAAAAAAAAAFsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABbAAAAICBzZXRBcHBsaWNhdGlvbk1lbnUgPSAoKSA9PgogIGluaXRJcGMgPSAoKSA9PgooZXZlbnQsIGFyZykgPT4KKGV2ZW50LCBocmVmKSA9PgooKSA9PgooKSA9PgAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/helpers/window.js",
						"symkeys":
						[
							[
								334,
								353
							],
							[
								590,
								605
							],
							[
								913,
								939
							],
							[
								1136,
								1181
							],
							[
								1427,
								1450
							],
							[
								1672,
								1715
							],
							[
								1767,
								1777
							],
							[
								2037,
								2054
							]
						],
						"symlist":
						[
							" (name, options) =>",
							"restore = () =>",
							"getCurrentPosition = () =>",
							"windowWithinBounds = (windowState, bounds) =>",
							"resetToDefaults = () =>",
							"ensureVisibleOnSomeDisplay = windowState =>",
							"display =>",
							"saveState = () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAANoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/hello_world/hello_world.js",
						"symkeys":
						[
							[
								13,
								26
							],
							[
								71,
								82
							]
						],
						"symlist":
						[
							"greet = () =>",
							"bye = () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADaAAAAKG5hbWUsIG9wdGlvbnMpID0+CiAgcmVzdG9yZSA9ICgpID0+CiAgZ2V0Q3VycmVudFBvc2l0aW9uID0gKCkgPT4KICB3aW5kb3dXaXRoaW5Cb3VuZHMgPSAod2luZG93U3RhdGUsIGJvdW5kcykgPT4KICByZXNldFRvRGVmYXVsdHMgPSAoKSA9PgogIGVuc3VyZVZpc2libGVPblNvbWVEaXNwbGF5ID0gd2luZG93U3RhdGUgPT4KICBkaXNwbGF5ID0+CiAgc2F2ZVN0YXRlID0gKCkgPT4AAAAAAAAAAB0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/hello_world/hello_world.spec.js",
						"symkeys":
						[
							[
								122,
								128
							],
							[
								145,
								151
							],
							[
								227,
								233
							],
							[
								328,
								334
							]
						],
						"symlist":
						[
							" () =>",
							" () =>",
							" () =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAICBncmVldCA9ICgpID0+CiAgYnllID0gKCkgPT4AAAAAAAAAABcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/hello_world/hello_world.js",
						"symkeys":
						[
							[
								13,
								26
							],
							[
								71,
								82
							]
						],
						"symlist":
						[
							"greet = () =>",
							"bye = () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4AAAAAAAAAAB0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAICBncmVldCA9ICgpID0+CiAgYnllID0gKCkgPT4AAAAAAAAAAKUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/temp/e2e_entry.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/resources/icon.icns",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AQAAAAAAAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/multi_layer1.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								585
							],
							[
								5787,
								5802
							],
							[
								6201,
								6217
							],
							[
								6420,
								6436
							],
							[
								6637,
								6653
							],
							[
								6854,
								6870
							],
							[
								7071,
								7087
							],
							[
								7288,
								7304
							],
							[
								7505,
								7522
							],
							[
								7736,
								7751
							],
							[
								8151,
								8170
							],
							[
								8226,
								8246
							],
							[
								8637,
								8654
							],
							[
								9511,
								9529
							],
							[
								9636,
								9654
							],
							[
								10131,
								10145
							],
							[
								10435,
								10459
							],
							[
								10715,
								10740
							],
							[
								12904,
								12916
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitD()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitc()",
							"function unitlw()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function setSWG()",
							"function odCalc(e)",
							"function clear01()",
							"function EF(e)",
							"function Mut(e, t, n, l)",
							"function FindInductance()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAOMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/src/app.js",
						"symkeys":
						[
							[
								115,
								123
							],
							[
								186,
								200
							],
							[
								261,
								270
							],
							[
								318,
								327
							],
							[
								355,
								364
							],
							[
								501,
								521
							],
							[
								559,
								578
							],
							[
								835,
								841
							],
							[
								1078,
								1091
							],
							[
								1250,
								1263
							],
							[
								1289,
								1316
							],
							[
								1343,
								1347
							],
							[
								1375,
								1384
							],
							[
								1702,
								1743
							],
							[
								2306,
								2343
							],
							[
								2597,
								2626
							],
							[
								2972,
								3000
							],
							[
								3049,
								3056
							],
							[
								3092,
								3118
							],
							[
								3175,
								3182
							],
							[
								3224,
								3250
							],
							[
								3347,
								3372
							],
							[
								3546,
								3568
							],
							[
								3764,
								3786
							],
							[
								3904,
								3929
							],
							[
								4026,
								4047
							],
							[
								4092,
								4096
							],
							[
								4162,
								4186
							],
							[
								4231,
								4235
							],
							[
								4297,
								4321
							],
							[
								4459,
								4468
							],
							[
								4661,
								4683
							],
							[
								4710,
								4714
							],
							[
								4797,
								4820
							],
							[
								4853,
								4857
							],
							[
								4921,
								4945
							],
							[
								5538,
								5569
							],
							[
								6138,
								6162
							],
							[
								6577,
								6609
							],
							[
								6644,
								6653
							],
							[
								6759,
								6768
							],
							[
								6893,
								6918
							],
							[
								7195,
								7221
							],
							[
								7495,
								7522
							],
							[
								7796,
								7822
							],
							[
								7949,
								7984
							],
							[
								8147,
								8174
							],
							[
								8380,
								8408
							],
							[
								8456,
								8489
							],
							[
								8891,
								8917
							],
							[
								9018,
								9041
							],
							[
								9284,
								9340
							],
							[
								9349,
								9350
							],
							[
								9731,
								9782
							],
							[
								10249,
								10272
							],
							[
								10319,
								10324
							],
							[
								10433,
								10442
							],
							[
								10471,
								10475
							],
							[
								10503,
								10508
							],
							[
								10541,
								10545
							],
							[
								10577,
								10587
							],
							[
								10715,
								10725
							],
							[
								10901,
								10920
							],
							[
								10959,
								10981
							],
							[
								11052,
								11056
							],
							[
								11077,
								11081
							],
							[
								11106,
								11132
							],
							[
								11144,
								11145
							],
							[
								11192,
								11201
							],
							[
								11240,
								11268
							],
							[
								11440,
								11456
							],
							[
								11574,
								11583
							],
							[
								11803,
								11812
							],
							[
								12007,
								12016
							],
							[
								12159,
								12163
							],
							[
								12195,
								12219
							],
							[
								12518,
								12527
							],
							[
								12897,
								12902
							],
							[
								12932,
								12966
							],
							[
								13012,
								13033
							],
							[
								13057,
								13067
							],
							[
								13103,
								13133
							],
							[
								13210,
								13244
							],
							[
								13326,
								13349
							],
							[
								13399,
								13441
							],
							[
								13519,
								13561
							],
							[
								14109,
								14128
							],
							[
								14268,
								14276
							],
							[
								14968,
								15010
							],
							[
								15021,
								15026
							],
							[
								15086,
								15109
							],
							[
								15154,
								15177
							],
							[
								15223,
								15258
							],
							[
								15355,
								15393
							],
							[
								15452,
								15456
							],
							[
								15472,
								15476
							],
							[
								15505,
								15518
							],
							[
								15621,
								15625
							],
							[
								15651,
								15656
							],
							[
								15716,
								15721
							]
						],
						"symlist":
						[
							"Q = s =>",
							"QA = (...a) =>",
							"GS = s =>",
							"GA = s =>",
							"GR = s =>",
							"calculate: (L, C) =>",
							"inverse: (f, LC) =>",
							" () =>",
							"rosaKm = e =>",
							"rosaKs = e =>",
							"function SeriesCaps(values)",
							"v =>",
							"(r, v) =>",
							"function CoilTurns(L, form, inner, outer)",
							"function CoilInductance(n, form, len)",
							" function OnInput({ target })",
							" function GetProps(cssStyle)",
							"name =>",
							" function GetAttributes(e)",
							"name =>",
							" function IsRange(fieldId)",
							" function FieldIndex(arg)",
							" function SaveConfig()",
							" function LoadConfig()",
							"function FieldElements(n)",
							" function GetField(n)",
							"e =>",
							" function SetField(n, v)",
							"e =>",
							" function SelectField(i)",
							"(e, x) =>",
							" function GuessField()",
							"v =>",
							" function GetSelected()",
							"e =>",
							" function GetRange(name)",
							" function SetRange(name, value)",
							" function CalcThompson()",
							" function FormatRange(arg, unit)",
							"(a, b) =>",
							"(n, i) =>",
							" function CalcFrequency()",
							" function CalcInductance()",
							" function CalcCapacitance()",
							" function ClearValues(idx)",
							" function ProcessValue(value, name)",
							" function ParseRange(value)",
							" function ParseNumber(value)",
							" function ParseValue(value, name)",
							" function ReadFields(name)",
							"({ name, value }, i) =>",
							" function FormatNumber(arg, unit, fn = 'round', round = ",
							")",
							"async function SetStatus(str, t1 = 3000, t2 = 1000)",
							" function SetupFields()",
							"() =>",
							"(a, i) =>",
							"e =>",
							" e =>",
							"e =>",
							"async e =>",
							"async e =>",
							" function GetSize()",
							" function GetMaxSize()",
							"e =>",
							"v =>",
							" function ChangeSize(sz = ",
							")",
							"(e, i) =>",
							" function ChangePrecision(p)",
							" function Init()",
							"(e, i) =>",
							" event =>",
							" event =>",
							"e =>",
							" ({ target, deltaY }) =>",
							"(v, i) =>",
							"() =>",
							" function NumericValue([num, exp])",
							" function WaitFor(ms)",
							"resolve =>",
							" function RemoveAllChildren(e)",
							" function* PartitionArray(a, size)",
							" function Exponent(num)",
							" function Thousand(exponent, fn = 'floor')",
							" function Exp2Unit(exponent, fn = 'floor')",
							" function Unit(str)",
							"([a]) =>",
							" function RoundTo(prec = config.precision)",
							" n =>",
							" function IsNumber(arg)",
							" function IsString(arg)",
							"async function CopyToClipboard(str)",
							"function Rect({ x, y, width, height })",
							"Rect",
							"Rect",
							" function* ()",
							"Rect",
							"get()",
							"get()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEQoKQogIHVuaXRkKCkKICB1bml0cCgpCiAgdW5pdGwoKQogIHVuaXRjKCkKICB1bml0bHcoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHNldFNXRygpCiAgb2RDYWxjKGUpCiAgY2xlYXIwMSgpCkVGKGUpCk11dChlLCB0LCBuLCBsKQpGaW5kSW5kdWN0YW5jZSgpCmZ1bmN0aW9uKCkAAAAAAAAAAKUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/thomson-calculator-1.0-win32-ia32.txz",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAUSA9IHMgPT4KUUEgPSAoLi4uYSkgPT4KR1MgPSBzID0+CkdBID0gcyA9PgpHUiA9IHMgPT4KICBjYWxjdWxhdGU6IChMLCBDKSA9PgogIGludmVyc2U6IChmLCBMQykgPT4KKCkgPT4KICByb3NhS20gPSBlID0+CiAgcm9zYUtzID0gZSA9PgpTZXJpZXNDYXBzKHZhbHVlcykKICB2ID0+CihyLCB2KSA9PgpDb2lsVHVybnMoTCwgZm9ybSwgaW5uZXIsIG91dGVyKQpDb2lsSW5kdWN0YW5jZShuLCBmb3JtLCBsZW4pCk9uSW5wdXQoeyB0YXJnZXQgfSkKR2V0UHJvcHMoY3NzU3R5bGUpCiAgbmFtZSA9PgpHZXRBdHRyaWJ1dGVzKGUpCiAgbmFtZSA9PgpJc1JhbmdlKGZpZWxkSWQpCkZpZWxkSW5kZXgoYXJnKQpTYXZlQ29uZmlnKCkKTG9hZENvbmZpZygpCkZpZWxkRWxlbWVudHMobikKR2V0RmllbGQobikKICBlID0+ClNldEZpZWxkKG4sIHYpCiAgZSA9PgpTZWxlY3RGaWVsZChpKQooZSwgeCkgPT4KR3Vlc3NGaWVsZCgpCiAgdiA9PgpHZXRTZWxlY3RlZCgpCiAgZSA9PgpHZXRSYW5nZShuYW1lKQpTZXRSYW5nZShuYW1lLCB2YWx1ZSkKQ2FsY1Rob21wc29uKCkKRm9ybWF0UmFuZ2UoYXJnLCB1bml0KQooYSwgYikgPT4KKG4sIGkpID0+CkNhbGNGcmVxdWVuY3koKQpDYWxjSW5kdWN0YW5jZSgpCkNhbGNDYXBhY2l0YW5jZSgpCkNsZWFyVmFsdWVzKGlkeCkKUHJvY2Vzc1ZhbHVlKHZhbHVlLCBuYW1lKQpQYXJzZVJhbmdlKHZhbHVlKQpQYXJzZU51bWJlcih2YWx1ZSkKUGFyc2VWYWx1ZSh2YWx1ZSwgbmFtZSkKUmVhZEZpZWxkcyhuYW1lKQooeyBuYW1lLCB2YWx1ZSB9LCBpKSA9PgpGb3JtYXROdW1iZXIoYXJnLCB1bml0LCBmbiA9ICdyb3VuZCcsIHJvdW5kID0gCikKU2V0U3RhdHVzKHN0ciwgdDEgPSAzMDAwLCB0MiA9IDEwMDApClNldHVwRmllbGRzKCkKKCkgPT4KKGEsIGkpID0+CiAgZSA9PgplID0+CiAgZSA9PgogIGUgPT4KICBlID0+CkdldFNpemUoKQpHZXRNYXhTaXplKCkKICBlID0+CiAgdiA9PgpDaGFuZ2VTaXplKHN6ID0gCikKKGUsIGkpID0+CkNoYW5nZVByZWNpc2lvbihwKQpJbml0KCkKKGUsIGkpID0+CmV2ZW50ID0+CmV2ZW50ID0+CiAgZSA9PgooeyB0YXJnZXQsIGRlbHRhWSB9KSA9PgoodiwgaSkgPT4KKCkgPT4KTnVtZXJpY1ZhbHVlKFtudW0sIGV4cF0pCldhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgpSZW1vdmVBbGxDaGlsZHJlbihlKQpQYXJ0aXRpb25BcnJheShhLCBzaXplKQpFeHBvbmVudChudW0pClRob3VzYW5kKGV4cG9uZW50LCBmbiA9ICdmbG9vcicpCkV4cDJVbml0KGV4cG9uZW50LCBmbiA9ICdmbG9vcicpClVuaXQoc3RyKQooW2FdKSA9PgpSb3VuZFRvKHByZWMgPSBjb25maWcucHJlY2lzaW9uKQpuID0+CklzTnVtYmVyKGFyZykKSXNTdHJpbmcoYXJnKQpDb3B5VG9DbGlwYm9hcmQoc3RyKQpSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9KQpSZWN0ClJlY3QKKCkKUmVjdAogIGdldCgpCiAgZ2V0KCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AQAAAAAAAAAAAAAABgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/LICENSE",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/multi_layer1.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								585
							],
							[
								5787,
								5802
							],
							[
								6201,
								6217
							],
							[
								6420,
								6436
							],
							[
								6637,
								6653
							],
							[
								6854,
								6870
							],
							[
								7071,
								7087
							],
							[
								7288,
								7304
							],
							[
								7505,
								7522
							],
							[
								7736,
								7751
							],
							[
								8151,
								8170
							],
							[
								8226,
								8246
							],
							[
								8637,
								8654
							],
							[
								9511,
								9529
							],
							[
								9636,
								9654
							],
							[
								10131,
								10145
							],
							[
								10435,
								10459
							],
							[
								10715,
								10740
							],
							[
								12904,
								12916
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitD()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitc()",
							"function unitlw()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function setSWG()",
							"function odCalc(e)",
							"function clear01()",
							"function EF(e)",
							"function Mut(e, t, n, l)",
							"function FindInductance()",
							" function()"
						]
					},
					"AQAAAAAAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/LICENSE",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEQoKQogIHVuaXRkKCkKICB1bml0cCgpCiAgdW5pdGwoKQogIHVuaXRjKCkKICB1bml0bHcoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHNldFNXRygpCiAgb2RDYWxjKGUpCiAgY2xlYXIwMSgpCkVGKGUpCk11dChlLCB0LCBuLCBsKQpGaW5kSW5kdWN0YW5jZSgpCmZ1bmN0aW9uKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					52,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/app.diff",
						"symkeys":
						[
							[
								104,
								115
							],
							[
								834,
								845
							],
							[
								1130,
								1141
							],
							[
								1418,
								1429
							],
							[
								1780,
								1793
							],
							[
								2082,
								2095
							],
							[
								2350,
								2365
							],
							[
								3742,
								3755
							],
							[
								4186,
								4199
							],
							[
								4614,
								4627
							],
							[
								5059,
								5072
							]
						],
						"symlist":
						[
							"-3,15 +3,18",
							"-22,7 +25,7",
							"-48,7 +51,7",
							"-64,7 +67,7",
							"-199,7 +202,7",
							"-210,7 +213,7",
							"-224,26 +227,50",
							"-255,7 +282,7",
							"-278,7 +305,7",
							"-337,7 +364,7",
							"-415,4 +442,4"
						]
					},
					"AQAAAAAAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/010.app.js.diff",
						"symkeys":
						[
							[
								74,
								87
							]
						],
						"symlist":
						[
							"-415,4 +442,4"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACTAAAALTMsMTUgKzMsMTgKLTIyLDcgKzI1LDcKLTQ4LDcgKzUxLDcKLTY0LDcgKzY3LDcKLTE5OSw3ICsyMDIsNwotMjEwLDcgKzIxMyw3Ci0yMjQsMjYgKzIyNyw1MAotMjU1LDcgKzI4Miw3Ci0yNzgsNyArMzA1LDcKLTMzNyw3ICszNjQsNwotNDE1LDQgKzQ0Miw0AAAAAAAAAAANAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/009.app.js.diff",
						"symkeys":
						[
							[
								74,
								87
							]
						],
						"symlist":
						[
							"-337,7 +364,7"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANAAAALTQxNSw0ICs0NDIsNAAAAAAAAAAADQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/README.md",
						"symkeys":
						[
							[
								0,
								22
							],
							[
								520,
								533
							],
							[
								786,
								812
							],
							[
								1533,
								1546
							],
							[
								1548,
								1567
							],
							[
								1588,
								1609
							],
							[
								2086,
								2101
							],
							[
								2429,
								2462
							],
							[
								3063,
								3072
							],
							[
								3107,
								3114
							],
							[
								3407,
								3420
							],
							[
								3604,
								3622
							]
						],
						"symlist":
						[
							" electron-boilerplate",
							" Quick start",
							" Structure of the project",
							" Development",
							"   Starting the app",
							"   The build pipeline",
							"   Environments",
							"   Adding npm modules to your app",
							" Testing",
							"   Unit",
							"   End to end",
							" Making a release"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANAAAALTMzNyw3ICszNjQsNwAAAAAAAAAA9QAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD1AAAAZWxlY3Ryb24tYm9pbGVycGxhdGUKICAgICBRdWljayBzdGFydAogICAgIFN0cnVjdHVyZSBvZiB0aGUgcHJvamVjdAogICAgIERldmVsb3BtZW50CiAgICAgU3RhcnRpbmcgdGhlIGFwcAogICAgIFRoZSBidWlsZCBwaXBlbGluZQogICAgIEVudmlyb25tZW50cwogICAgIEFkZGluZyBucG0gbW9kdWxlcyB0byB5b3VyIGFwcAogICAgIFRlc3RpbmcKICAgICBVbml0CiAgICAgRW5kIHRvIGVuZAogICAgIE1ha2luZyBhIHJlbGVhc2UAAAAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/package.json",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/one_layer.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								586
							],
							[
								2377,
								2399
							],
							[
								5863,
								5878
							],
							[
								6441,
								6457
							],
							[
								6660,
								6677
							],
							[
								6884,
								6900
							],
							[
								7101,
								7118
							],
							[
								7330,
								7346
							],
							[
								7547,
								7563
							],
							[
								7764,
								7780
							],
							[
								7981,
								7998
							],
							[
								8210,
								8225
							],
							[
								8625,
								8644
							],
							[
								8700,
								8720
							],
							[
								9111,
								9129
							],
							[
								9410,
								9428
							],
							[
								9466,
								9484
							],
							[
								9591,
								9609
							],
							[
								9894,
								9912
							],
							[
								10095,
								10112
							],
							[
								11540,
								11557
							],
							[
								12737,
								12749
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure2(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitL3()",
							"function unitD()",
							"function unitD2()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitl2()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function rosaKm(e)",
							"function rosaKs(e)",
							"function odCalc(e)",
							"function clear01()",
							"function clear02()",
							"function calc01()",
							"function calc02()",
							" function()"
						]
					},
					"AQAAAAAAAAAAAAAABgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/multi_layer1.js",
						"symkeys":
						[
							[
								0,
								19
							],
							[
								563,
								585
							],
							[
								5787,
								5802
							],
							[
								6201,
								6217
							],
							[
								6420,
								6436
							],
							[
								6637,
								6653
							],
							[
								6854,
								6870
							],
							[
								7071,
								7087
							],
							[
								7288,
								7304
							],
							[
								7505,
								7522
							],
							[
								7736,
								7751
							],
							[
								8151,
								8170
							],
							[
								8226,
								8246
							],
							[
								8637,
								8654
							],
							[
								9511,
								9529
							],
							[
								9636,
								9654
							],
							[
								10131,
								10145
							],
							[
								10435,
								10459
							],
							[
								10715,
								10740
							],
							[
								12904,
								12916
							]
						],
						"symlist":
						[
							"function checnum(e)",
							"function SetMeasure(e)",
							"function setC()",
							"function unitL()",
							"function unitD()",
							"function unitd()",
							"function unitp()",
							"function unitl()",
							"function unitc()",
							"function unitlw()",
							"function setP()",
							"function clearFix()",
							"function setAWG(awg)",
							"function setSWG()",
							"function odCalc(e)",
							"function clear01()",
							"function EF(e)",
							"function Mut(e, t, n, l)",
							"function FindInductance()",
							" function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAQAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUyKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEwzKCkKICB1bml0RCgpCiAgdW5pdEQyKCkKICB1bml0ZCgpCiAgdW5pdHAoKQogIHVuaXRsKCkKICB1bml0bDIoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHJvc2FLbShlKQogIHJvc2FLcyhlKQogIG9kQ2FsYyhlKQogIGNsZWFyMDEoKQogIGNsZWFyMDIoKQogIGNhbGMwMSgpCiAgY2FsYzAyKCkKZnVuY3Rpb24oKQAAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/thomson-calculator/thomson-calculator.sublime-project",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAAAAICBjaGVjbnVtKGUpClNldE1lYXN1cmUoZSkKICBzZXRDKCkKICB1bml0TCgpCiAgdW5pdEQoKQogIHVuaXRkKCkKICB1bml0cCgpCiAgdW5pdGwoKQogIHVuaXRjKCkKICB1bml0bHcoKQogIHNldFAoKQogIGNsZWFyRml4KCkKICBzZXRBV0coYXdnKQogIHNldFNXRygpCiAgb2RDYWxjKGUpCiAgY2xlYXIwMSgpCkVGKGUpCk11dChlLCB0LCBuLCBsKQpGaW5kSW5kdWN0YW5jZSgpCmZ1bmN0aW9uKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "function checnum(e) {\n  var t = e.value;\n  t.lastIndexOf(' ') >= 0 && ((t = t.replace(' ', '')), (e.value = t)), t.lastIndexOf(',') >= 0 && ((t = t.replace(',', '.')), (e.value = t));\n  var n,\n    l = '0123456789.-,',\n    d = !0,\n    a = t;\n  if(0 == a.length) return !1;\n  for(i = 0; i < a.length && 1 == d; i++) (n = a.charAt(i)), -1 == l.indexOf(n) && ((t = t.substring(0, t.length - 1)), (e.value = t));\n  e.value.match(/\\./g).length > 1 && (e.value = e.value.substr(0, e.value.lastIndexOf('.'))), 0 == t.lastIndexOf('.') && ((t = '0' + t), (e.value = t));\n}\nfunction SetMeasure2(e) {\n  if(0 == e)\n    var t = 1 * document.getElementById('DM2').value,\n      n = 1 * document.getElementById('D2').value * t,\n      l = 1 * document.getElementById('lM2').value,\n      d = 1 * document.getElementById('l2').value * l;\n  var a = 1 * document.getElementById('Measure2').value;\n  1 == a\n    ? ((document.getElementById('D_td2').innerHTML =\n        '=&nbsp;<input id=\"D2\" value=\"12\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"DM2\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitD2()\"><option selected=\"selected\" value=\"1\">mm</option><option value=\"10\">cm</option></select>'),\n      (document.getElementById('l_td2').innerHTML =\n        '=&nbsp;<input id=\"l2\" value=\"10\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"lM2\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitl2()\"><option selected=\"selected\" value=\"1\">mm</option><option value=\"10\">cm</option></select>'))\n    : 0 == a &&\n      ((document.getElementById('D_td2').innerHTML =\n        '=&nbsp;<input id=\"D2\" value=\"12\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"DM2\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitD2()\"><option value=\"0.0254\">mil</option><option selected=\"selected\" value=\"25.4\">inch</option></select>'),\n      (document.getElementById('l_td2').innerHTML =\n        '=&nbsp;<input id=\"l2\" value=\"10\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"lM2\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitl2()\"><option value=\"0.0254\">mil</option><option selected=\"selected\" value=\"25.4\">inch</option></select>')),\n    0 == e &&\n      ((t = 1 * document.getElementById('DM2').value), (document.getElementById('D2').value = n / t), (l = 1 * document.getElementById('lM2').value), (document.getElementById('l2').value = d / l));\n}\nfunction SetMeasure(e) {\n  if(0 == e)\n    var t = 1 * document.getElementById('DM').value,\n      n = 1 * document.getElementById('D').value * t,\n      l = 1 * document.getElementById('dM').value,\n      d = 1 * document.getElementById('d').value * l,\n      a = 1 * document.getElementById('pM').value,\n      u = 1 * document.getElementById('p').value * a,\n      o = 1 * document.getElementById('lM').value,\n      m = 1 * document.getElementById('l').value * o;\n  var c = 1 * document.getElementById('Measure').value;\n  1 == c\n    ? ((document.getElementById('D_td').innerHTML =\n        '=&nbsp;<input id=\"D\" value=\"10\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"DM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitD()\"><option selected=\"selected\" value=\"1\">mm</option><option value=\"10\">cm</option></select>'),\n      (document.getElementById('d_td').innerHTML =\n        '=&nbsp;<input id=\"d\" onkeyup=\"checnum(this)\" onchange=\"setP()\" onkeydown=\"clearFix()\" type=\"text\" size=\"5px\" /><select id=\"dM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitd()\"><option selected=\"selected\" value=\"1\">mm</option><option value=\"10\">cm</option></select>'),\n      (document.getElementById('k_td').innerHTML =\n        '=&nbsp;<input id=\"p\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"pM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitp()\"><option selected=\"selected\" value=\"1\">mm</option><option value=\"10\">cm</option></select>'),\n      (document.getElementById('l_td').innerHTML =\n        '=&nbsp;<input id=\"l\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"lM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitl()\"><option selected=\"selected\" value=\"1\">mm</option><option value=\"10\">cm</option></select>'))\n    : 0 == c &&\n      ((document.getElementById('D_td').innerHTML =\n        '=&nbsp;<input id=\"D\" value=\"10\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"DM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitD()\"><option value=\"0.0254\">mil</option><option selected=\"selected\" value=\"25.4\">inch</option></select>'),\n      (document.getElementById('d_td').innerHTML =\n        '=&nbsp;<input id=\"d\" onkeyup=\"checnum(this)\" onchange=\"setP()\" onkeydown=\"clearFix()\" type=\"text\" size=\"5px\" /><select id=\"dM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitd()\"><option selected=\"selected\" value=\"0.0254\">mil</option><option value=\"25.4\">inch</option></select>'),\n      (document.getElementById('k_td').innerHTML =\n        '=&nbsp;<input id=\"p\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"pM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitp()\"><option selected=\"selected\" value=\"0.0254\">mil</option><option value=\"25.4\">inch</option></select>'),\n      (document.getElementById('l_td').innerHTML =\n        '=&nbsp;<input id=\"l\" onkeyup=\"checnum(this)\" type=\"text\" size=\"5px\" /><select id=\"lM\" style=\"width: auto;\" onclick=\"setC()\" onChange=\"unitl()\"><option value=\"0.0254\">mil</option><option selected=\"selected\" value=\"25.4\">inch</option></select>')),\n    0 == e &&\n      ((t = 1 * document.getElementById('DM').value),\n      (document.getElementById('D').value = n / t),\n      (l = 1 * document.getElementById('dM').value),\n      (document.getElementById('d').value = d / l),\n      (a = 1 * document.getElementById('pM').value),\n      (document.getElementById('p').value = u / a),\n      (o = 1 * document.getElementById('lM').value),\n      (document.getElementById('l').value = m / o));\n}\nfunction setC() {\n  (IndVal = eval(document.getElementById('LM').value)),\n    document.getElementById('LM2') && (IndVal2 = eval(document.getElementById('LM2').value)),\n    (dVal = eval(document.getElementById('dM').value)),\n    (pVal = eval(document.getElementById('pM').value)),\n    (lVal = eval(document.getElementById('lM').value)),\n    document.getElementById('lM2') && (lVal2 = eval(document.getElementById('lM2').value)),\n    (DVal = eval(document.getElementById('DM').value)),\n    document.getElementById('DM2') && (D2Val = eval(document.getElementById('DM2').value));\n}\nfunction unitL() {\n  var L = parseFloat(document.getElementById('L').value),\n    LM = eval(document.getElementById('LM').value);\n  L && ((L = (L * IndVal) / LM), (document.getElementById('L').value = parseFloat(L)));\n}\nfunction unitL3() {\n  var l = parseFloat(document.getElementById('L2').value),\n    lM = eval(document.getElementById('LM2').value);\n  l && ((l = (l * IndVal2) / lM), (document.getElementById('L2').value = parseFloat(l)));\n}\nfunction unitD() {\n  var D = parseFloat(document.getElementById('D').value),\n    DM = eval(document.getElementById('DM').value);\n  D && ((D = (D * DVal) / DM), (document.getElementById('D').value = parseFloat(D)));\n}\nfunction unitD2() {\n  var D2 = parseFloat(document.getElementById('D2').value),\n    DM2 = eval(document.getElementById('DM2').value);\n  D2 && ((D2 = (D2 * D2Val) / DM2), (document.getElementById('D2').value = parseFloat(D2)));\n}\nfunction unitd() {\n  var d = parseFloat(document.getElementById('d').value),\n    dM = eval(document.getElementById('dM').value);\n  d && ((d = (d * dVal) / dM), (document.getElementById('d').value = parseFloat(d)));\n}\nfunction unitp() {\n  var p = parseFloat(document.getElementById('p').value),\n    pM = eval(document.getElementById('pM').value);\n  p && ((p = (p * pVal) / pM), (document.getElementById('p').value = parseFloat(p)));\n}\nfunction unitl() {\n  var l = parseFloat(document.getElementById('l').value),\n    lM = eval(document.getElementById('lM').value);\n  l && ((l = (l * lVal) / lM), (document.getElementById('l').value = parseFloat(l)));\n}\nfunction unitl2() {\n  var l2 = parseFloat(document.getElementById('l2').value),\n    lM2 = eval(document.getElementById('lM2').value);\n  l2 && ((l2 = (l2 * lVal2) / lM2), (document.getElementById('l2').value = parseFloat(l2)));\n}\nfunction setP() {\n  var auto = document.getElementById('checkbox').checked;\n  if(1 == auto) {\n    var d = parseFloat(document.getElementById('d').value),\n      dM = eval(document.getElementById('dM').value),\n      pM = eval(document.getElementById('pM').value);\n    d *= dM;\n    var p1 = odCalc(d);\n    (p1 /= pM), (document.getElementById('p').value = p1), (document.getElementById('gauge').innerHTML = '');\n  }\n}\nfunction clearFix() {\n  document.getElementById('gauge').innerHTML = '';\n}\nfunction setAWG(awg) {\n  var d = 0.127 * Math.exp((36 - awg) / 8.624889),\n    dM = eval(document.getElementById('dM').value);\n  (document.getElementById('d').value = d / dM), setP();\n  var f = ['0000', '000', '00'];\n  if(awg < 0) {\n    var g = parseInt(awg) + 3;\n    document.getElementById('gauge').innerHTML = '(AWG-' + f[g] + ')';\n  } else document.getElementById('gauge').innerHTML = '(AWG-' + awg + ')';\n}\nfunction rosaKm(e) {\nlet n2, n3, n5, n7, n9;\n  return (\n    (n2 = e * e),\n    (n3 = n2 * e),\n    (n5 = n3 * n2),\n    (n7 = n5 * n2),\n    (n9 = n7 * n2),\n    Math.log(2 * Math.PI) - 1.5 - Math.log(e) / (6 * e) - 0.33084236 / e - 1 / (120 * n3) + 1 / (504 * n5) - 0.0011923 / n7 + 5068e-7 / n9\n  );\n}\nfunction rosaKs(e) {\n  return 1.25 - Math.log(2 * e);\n}\nfunction odCalc(e) {\n  return (m = 0.96344), (b = -0.19861), (od = Math.max(Math.exp(m * Math.log(e) + b), 1.09 * e)), od;\n}\nfunction clear01() {\n  (document.getElementById('w').value = ''),\n    (document.getElementById('l').value = ''),\n    (document.getElementById('L').value = ''),\n    (document.getElementById('p').value = ''),\n    (document.getElementById('D').value = ''),\n    (document.getElementById('d').value = '');\n}\nfunction clear02() {\n  (document.getElementById('w0').value = ''), (document.getElementById('D2').value = ''), (document.getElementById('l2').value = ''), (document.getElementById('L2').value = '');\n}\nfunction calc01() {\n  var msg = 'Data was entered wrong';\n  'ru' == document.documentElement.lang && (msg = 'Данные введены неверно');\n  var I = parseFloat(document.getElementById('L').value),\n    D = parseFloat(document.getElementById('D').value),\n    d = parseFloat(document.getElementById('d').value),\n    p = parseFloat(document.getElementById('p').value),\n    LM = eval(document.getElementById('LM').value),\n    DM = eval(document.getElementById('DM').value),\n    dM = eval(document.getElementById('dM').value),\n    pM = eval(document.getElementById('pM').value),\n    lM = eval(document.getElementById('lM').value);\n  if(I && D && d && p)\n    if(0 != I && 0 != D && 0 != d && 0 != p) {\n      (I *= LM), (D *= DM), (d *= dM), (p *= pM);\n      var w = 0,\n        l = 0,\n        i = 0,\n        Dk = 0;\n      for(Ks = rosaKs(p / d), Dk = D + p; i <= I; )\n        (w += 0.001),\n          (l = w * p),\n          (k = l / Dk),\n          (i = 2e-4 * Math.PI * Dk * w * w * (Math.log(1 + Math.PI / (2 * k)) + 1 / (2.3004 + 3.437 * k + 1.763 * k * k - 0.47 / Math.pow(0.755 + 1 / k, 1.44)))),\n          (Km = rosaKm(w)),\n          (Lcor = 2e-4 * Math.PI * Dk * w * (Ks + Km)),\n          (i -= Lcor);\n      var w0 = Math.round(1e3 * w) / 1e3,\n        la = Math.round((1e3 * l) / lM) / 1e3;\n      (document.getElementById('w').value = parseFloat(w0)), (document.getElementById('l').value = parseFloat(la));\n    } else alert(msg);\n  else alert(msg);\n}\n\nfunction calc02() {\n  var msg = 'Data was entered wrong';\n  'ru' == document.documentElement.lang && (msg = 'Данные введены неверно');\n  var w = parseFloat(document.getElementById('w0').value),\n    D = parseFloat(document.getElementById('D2').value),\n    l = parseFloat(document.getElementById('l2').value),\n    LM2 = eval(document.getElementById('LM2').value),\n    lM = eval(document.getElementById('lM2').value),\n    DM = eval(document.getElementById('DM2').value);\n  if(0 != w && 0 != D && 0 != l)\n    if(w && D && l) {\n      (l *= lM), (D *= DM);\n      var p = l / w,\n        Ks = rosaKs(1.07),\n        Dk = D + p,\n        k = l / Dk,\n        L = 2e-4 * Math.PI * Dk * w * w * (Math.log(1 + Math.PI / (2 * k)) + 1 / (2.3004 + 3.437 * k + 1.763 * k * k - 0.47 / Math.pow(0.755 + 1 / k, 1.44))),\n        Km = rosaKm(w),\n        Lcor = 2e-4 * Math.PI * Dk * w * (Ks + Km);\n      L -= Lcor;\n      var L0 = Math.round((1e3 * L) / LM2) / 1e3;\n      document.getElementById('L2').value = parseFloat(L0);\n    } else alert(msg);\n  else alert(msg);\n}\nvar DVal = 0,\n  D2Val = 0,\n  dVal = 0,\n  pVal = 0,\n  lVal = 0,\n  lVal2 = 0,\n  IndVal = 0,\n  IndVal2 = 0;\nwindow.addEventListener(\n  'DOMContentLoaded',\n  function() {\n    SetMeasure(1), SetMeasure2(1);\n    var e = document.getElementById('awg').value;\n    setAWG(e);\n  },\n  !0\n);\n",
			"file": "one_layer.js",
			"file_size": 12881,
			"file_write_time": 133494948094246328,
			"settings":
			{
				"buffer_size": 12865,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPosAAAAAAAA+ywAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6LAAAAAAAAPosAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAKsjAAAAAAAArCMAAAAAAAAAAAAArCMAAAAAAACuIwAAAAAAAAAAAACuIwAAAAAAAK8jAAAAAAAAAAAAAK8jAAAAAAAAsCMAAAAAAAAAAAAAsCMAAAAAAACxIwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrIwAAAAAAAKsjAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " n2,n3,"
					},
					"BwAAALEjAAAAAAAAsiMAAAAAAAAAAAAAsiMAAAAAAACzIwAAAAAAAAAAAACzIwAAAAAAALQjAAAAAAAAAAAAALQjAAAAAAAAtSMAAAAAAAAAAAAAtSMAAAAAAAC2IwAAAAAAAAAAAAC2IwAAAAAAALcjAAAAAAAAAAAAALcjAAAAAAAAuCMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxIwAAAAAAALEjAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "n4,"
					},
					"AwAAALgjAAAAAAAAuSMAAAAAAAAAAAAAuSMAAAAAAAC6IwAAAAAAAAAAAAC6IwAAAAAAALsjAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4IwAAAAAAALgjAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "n5,n6,n7"
					},
					"CAAAALsjAAAAAAAAvCMAAAAAAAAAAAAAvCMAAAAAAAC9IwAAAAAAAAAAAAC9IwAAAAAAAL4jAAAAAAAAAAAAAL4jAAAAAAAAvyMAAAAAAAAAAAAAvyMAAAAAAADAIwAAAAAAAAAAAADAIwAAAAAAAMEjAAAAAAAAAAAAAMEjAAAAAAAAwiMAAAAAAAAAAAAAwiMAAAAAAADDIwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7IwAAAAAAALsjAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": ",n8"
					},
					"AwAAAMMjAAAAAAAAxCMAAAAAAAAAAAAAxCMAAAAAAADFIwAAAAAAAAAAAADFIwAAAAAAAMYjAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDIwAAAAAAAMMjAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAMUjAAAAAAAAxSMAAAAAAAABAAAAOA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGIwAAAAAAAMYjAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"cut",
					null,
					"AQAAAKwjAAAAAAAArCMAAAAAAAAaAAAAICBsZXQgbjIsbjMsbjQsbjUsbjYsbjcsbgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsIwAAAAAAAMYjAAAAAAAAAAAAAAAAAAA"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKwjAAAAAAAArSMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsIwAAAAAAAKwjAAAAAAAAAAAAAAAAAAA"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKwjAAAAAAAArSMAAAAAAAAAAAAArSMAAAAAAACuIwAAAAAAAAAAAACuIwAAAAAAAK8jAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsIwAAAAAAAKwjAAAAAAAAAAAAAAAAAAA"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8jAAAAAAAAsCMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvIwAAAAAAAK8jAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"",
					null,
					"AQAAALAjAAAAAAAAwyMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwIwAAAAAAALAjAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"left_delete",
					null,
					"AQAAAMIjAAAAAAAAwiMAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDIwAAAAAAAMMjAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMIjAAAAAAAAwyMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCIwAAAAAAAMIjAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"cut",
					null,
					"AQAAAJcjAAAAAAAAlyMAAAAAAABiAQAAZnVuY3Rpb24gcm9zYUttKGUpIHsKbGV0IG4yLCBuMywgbjUsIG43LCBuOTsKICByZXR1cm4gKAogICAgKG4yID0gZSAqIGUpLAogICAgKG4zID0gbjIgKiBlKSwKICAgIChuNSA9IG4zICogbjIpLAogICAgKG43ID0gbjUgKiBuMiksCiAgICAobjkgPSBuNyAqIG4yKSwKICAgIE1hdGgubG9nKDIgKiBNYXRoLlBJKSAtIDEuNSAtIE1hdGgubG9nKGUpIC8gKDYgKiBlKSAtIDAuMzMwODQyMzYgLyBlIC0gMSAvICgxMjAgKiBuMykgKyAxIC8gKDUwNCAqIG41KSAtIDAuMDAxMTkyMyAvIG43ICsgNTA2OGUtNyAvIG45CiAgKTsKfQpmdW5jdGlvbiByb3NhS3MoZSkgewogIHJldHVybiAxLjI1IC0gTWF0aC5sb2coMiAqIGUpOwp9",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5JAAAAAAAAJcjAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"paste",
					null,
					"AQAAAJcjAAAAAAAA+SQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXIwAAAAAAAJcjAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "import './stylesheets/main.css';\n//import './stylesheets/tlite.css';\n\n//import { tlite } from './tlite.js';\n\nconst Q = s => (typeof s == 'string' ? document.querySelector(s) : s);\nconst QA = (...a) => [...(document.querySelectorAll(a.join(', ')) ?? [])];\nconst GS = s => GetProps(window.getComputedStyle(Q(s)));\nconst GA = s => GetAttributes(Q(s));\nconst GR = s => Rect(Q(s)?.getBoundingClientRect());\n\nconst NUM_FIELDS = 3;\n\nconst $2PI = Math.PI * 2;\nconst $PI2 = Math.PI ** 2;\n\nconst Thompson = {\n  calculate: (L, C) => 1 / (Math.sqrt(L * C) * $2PI * 2),\n  inverse: (f, LC) => 1 / (4 * $PI2 * LC * f ** 2)\n};\n\nconst buffer = new ArrayBuffer(8 * NUM_FIELDS * 2);\nconst values = new Float64Array(buffer, 0, NUM_FIELDS);\nconst values2 = new Float64Array(buffer, 24, NUM_FIELDS);\nconst validValues = Array.from(new Array(NUM_FIELDS * 2), () => false);\nconst allValues = new Float64Array(buffer);\nconst fieldNames = ['L', 'C', 'f'];\nconst unitNames = ['H', 'F', 'Hz'];\nconst config = {};\nconst minSize = 10;\n\ndocument.addEventListener('load', Init);\n\nsetTimeout(Init, 100);\n\nconst rosaKm = e => Math.log(2 * Math.PI) - 1.5 - Math.log(e) / (6 * e) - 0.33084236 / e - 1 / (120 * e ** 3) + 1 / (504 * e ** 5) - 0.0011923 / e ** 7 + 5068e-7 / e ** 9;\nconst rosaKs = e => 1.25 - Math.log(2 * e);\n\nfunction SeriesCaps(values) {\n  return 1 / values.map(v => 1 / ParseNumber(v)).reduce((r, v) => r + v, 0);\n}\n\n/**\n * Calculates number of turns for a single-layer coil\n *\n * @param {Number} L          Inductance (µH)\n * @param {Number} form       form diameter (mm)\n * @param {Number} inner      inner wire diam (mm)\n * @param {Number} outer      outer wire diam (mm)\n *\n * @returns {Number}  number of turns\n */\nfunction CoilTurns(L, form, inner, outer) {\n  let n = 0,\n    i = 0,\n    Dk = form + outer;\n\n  L /= 2e-4 * Math.PI * Dk;\n\n  for(let Ks = rosaKs(outer / inner); i <= L; ) {\n    n += 1e-4;\n\n    const k = (n * outer) / Dk;\n\n    i = n * (Math.log(1 + Math.PI / (2 * k)) + 1 / (2.3004 + 3.437 * k + 1.763 * k * k - 0.47 / (0.755 + 1 / k) ** 1.44));\n    i -= Ks + rosaKm(n);\n    i *= n;\n  }\n\n  return n;\n}\n\n/**\n * Calculates inductance\n *\n * @param {Number} n     Number of turns\n * @param {Number} form  form diameter (mm)\n * @param {Number} len   coil length (mm)\n *\n * @returns {Number} inductance  (µH)\n */\nfunction CoilInductance(n, form, len) {\n  const Ks = rosaKs(1.07),\n    Dk = form + len / n,\n    k = len / Dk;\n\n  return n * 2e-4 * Math.PI * Dk * (n * (Math.log(1 + Math.PI / (2 * k)) + 1 / (2.3004 + 3.437 * k + 1.763 * k * k - 0.47 / (0.755 + 1 / k) ** 1.44)) - (Ks + rosaKm(n)));\n}\n\nexport function OnInput({ target }) {\n  const { name, value } = target;\n  const idx = FieldIndex(name);\n\n  if(idx !== undefined) {\n    event.preventDefault();\n\n    const range = ParseRange(value);\n\n    for(let i = 0; i < 2; i++) {\n      allValues[idx + i * NUM_FIELDS] = range[i];\n      validValues[idx + i * NUM_FIELDS] = i < range.length;\n    }\n\n    CalcThompson();\n  }\n}\n\nexport function GetProps(cssStyle) {\n  return Object.fromEntries([...cssStyle].map(name => [name, cssStyle[name]]));\n}\n\nexport function GetAttributes(e) {\n  return Object.fromEntries(e.getAttributeNames().map(name => [name, e.getAttribute(name)]));\n}\n\nexport function IsRange(fieldId) {\n  return GetRange(fieldId).length > 1;\n  return !!validValues[NUM_FIELDS + fieldId];\n}\n\nexport function FieldIndex(arg) {\n  if(IsString(arg)) {\n    arg = fieldNames.indexOf(arg);\n    if(arg == -1)\n      arg = {\n        L: 0,\n        C: 1,\n        f: 2\n      }[arg];\n  }\n  return arg;\n}\n\nexport function SaveConfig() {\n  for(let i = 0; i < NUM_FIELDS; i++) if(validValues[i]) config['LCf'[i]] = GetField(i);\n\n  config.selected = GetSelected();\n\n  localStorage.setItem('config', JSON.stringify(config));\n}\n\nexport function LoadConfig() {\n  let r = {};\n\n  try {\n    r = JSON.parse(localStorage.getItem('config') ?? '{}');\n  } catch(e) {}\n\n  return r;\n}\n\nfunction FieldElements(n) {\n  return [...PartitionArray([...Q('#fields').children], NUM_FIELDS)][FieldIndex(n)];\n}\n\nexport function GetField(n) {\n  const e = (FieldElements(n) ?? []).find(e => e.tagName.toLowerCase() == 'input');\n  return e?.value;\n}\n\nexport function SetField(n, v) {\n  const e = (FieldElements(n) ?? []).find(e => e.tagName.toLowerCase() == 'input');\n  e.value = v;\n}\n\nexport function SelectField(i) {\n  if(!(i >= 0 && i <= 2)) throw new Error(`SelectField i=${i}`);\n\n  for(let j = 0; j < NUM_FIELDS; j++) {\n    FieldElements(j).forEach((e, x) => e.classList[i == j ? 'add' : 'remove']('selected'));\n\n    FieldElements(j)[2].disabled = i == j;\n  }\n\n  Q('img').src = `svg/${['inductance', 'capacitance', 'freq'][i]}-equation.svg`;\n}\n\nexport function GuessField() {\n  if(validValues.filter(v => v === true).length == 2) return validValues.indexOf(false);\n\n  return 0;\n}\n\nexport function GetSelected() {\n  return QA('input')\n    .map(e => e.classList.contains('selected'))\n    .indexOf(true);\n}\n\nexport function GetRange(name) {\n  const idx = FieldIndex(name);\n\n  let a = [,];\n\n  try {\n    throw new Error();\n    for(let i = 0; i < 2; i++) {\n      if(IsNumber(allValues[idx + i * NUM_FIELDS]) && Number.isFinite(allValues[idx + i * NUM_FIELDS]) && !isNaN(allValues[idx + i * NUM_FIELDS])) {\n        a[i] = allValues[idx + i * NUM_FIELDS];\n        continue;\n      }\n      throw new Error();\n    }\n  } catch(e) {\n    a = ParseRange(GetField(idx) ?? '');\n    for(let i = 0; i < 2; i++) {\n      allValues[idx + i * NUM_FIELDS] = a[i];\n      validValues[idx + i * NUM_FIELDS] = i < a.length;\n    }\n  }\n\n  return a;\n}\n\nexport function SetRange(name, value) {\n  const idx = FieldIndex(name);\n\n  if(value === undefined) {\n    values[idx] = undefined;\n    return true;\n  }\n\n  if(IsNumber(value)) {\n    if(!Number.isFinite(value)) throw new Error(`SetRange name=${name} value=${value}`);\n\n    if(isNaN(value)) throw new Error(`SetRange name=${name} value=${value}`);\n  }\n\n  const range = ParseRange(value);\n\n  //console.log('SetRange', { name, value, range });\n\n  for(let i = 0; i < 2; i++) {\n    allValues[idx + i * NUM_FIELDS] = range[i];\n    validValues[idx + i * NUM_FIELDS] = i < range.length;\n  }\n\n  return range;\n}\n\nexport function CalcThompson() {\n  const sel = GetSelected();\n\n  if(IsNumber(sel) && !isNaN(sel)) {\n    const fn = [CalcInductance, CalcCapacitance, CalcFrequency][sel];\n\n    if(typeof fn != 'function') throw new Error(`CalcThompson sel=${sel}`);\n\n    [CalcInductance, CalcCapacitance, CalcFrequency][sel]();\n\n    const sz = GetSize(),\n      max = GetMaxSize();\n\n    if(max > sz || sz > minSize) ChangeSize(Math.max(minSize, max));\n  }\n}\n\nexport function FormatRange(arg, unit) {\n  const results = [...arg].sort((a, b) => a - b);\n\n  return (results.length > 1 ? [Math.min(...results), Math.max(...results)] : results)\n    .map((n, i) => FormatNumber(n, i > 0 ? unit : undefined, config.precision <= 0 ? 'floor' : 'round', RoundTo()))\n    .join(' - ');\n}\n\nexport function CalcFrequency() {\n  const results = [],\n    L = GetRange('L'),\n    C = GetRange('C');\n\n  for(let i = 0; i < L.length; i++) for (let j = 0; j < C.length; j++) results.push(Thompson.calculate(L[i], C[j]));\n\n  const str = FormatRange(results, 'Hz');\n\n  SetField(2, str);\n\n  return str;\n}\n\nexport function CalcInductance() {\n  const results = [],\n    f = GetRange('f'),\n    C = GetRange('C');\n\n  for(let i = 0; i < f.length; i++) for (let j = 0; j < C.length; j++) results.push(Thompson.inverse(f[i], C[j]));\n\n  const str = FormatRange(results, 'H');\n\n  SetField(0, str);\n\n  return str;\n}\n\nexport function CalcCapacitance() {\n  const results = [],\n    f = GetRange('f'),\n    L = GetRange('L');\n\n  for(let i = 0; i < f.length; i++) for (let j = 0; j < L.length; j++) results.push(Thompson.inverse(f[i], L[j]));\n\n  const str = FormatRange(results, 'F');\n\n  SetField(1, str);\n\n  return str;\n}\n\nexport function ClearValues(idx) {\n  for(let i = 0; i < NUM_FIELDS; i++) if(idx === undefined || (IsNumber(idx) && i == idx)) SetRange(i, undefined);\n}\n\nexport function ProcessValue(value, name) {\n  try {\n    const [num, exp] = Unit(value);\n    return Math.pow(10, exp) * num;\n  } catch(e) {\n    console.error('ProcessValue', { value, name });\n  }\n}\n\nexport function ParseRange(value) {\n  const parts = value\n    .split(/\\s*-\\s*/g)\n    .map(Unit)\n    .slice(0, 2);\n\n  if(parts[0] && parts[1]) if (parts[0][1] === null) parts[0][1] = parts[1][1];\n\n  return parts.map(NumericValue);\n}\n\nexport function ParseNumber(value) {\n  return NumericValue(Unit(value));\n}\n\nexport function ParseValue(value, name) {\n  const idx = FieldIndex(name);\n\n  if(!IsString(name)) name = 'LCf'[idx];\n\n  if(value != '') {\n    const result = ProcessValue(value, name);\n    const valid = (validValues[idx] = !isNaN(result));\n\n    if(!valid || idx === undefined) throw new Error(`ParseValue idx=${idx} name=${name} value=${value} result=${result}`);\n\n    values[idx] = valid ? result : undefined;\n\n    return valid;\n  }\n}\n\nexport function ReadFields(name) {\n  const idx = FieldIndex(name);\n\n  ClearValues(idx);\n\n  QA('input')\n    .slice(0, 2)\n    .forEach(({ name, value }, i) => {\n      if(!IsNumber(idx) || i == idx)\n        if((IsString(value) && value != '') || (IsNumber(value) && Number.isFinite(value))) if (!ParseValue(value, name)) throw new Error(`ReadFields(): error parsing field '${name}'`);\n    });\n}\n\nexport function FormatNumber(arg, unit, fn = 'round', round = RoundTo()) {\n  let [num, exp = null] = Array.isArray(arg) ? arg : [arg];\n\n  if(!IsNumber(exp)) exp = Exponent(num);\n  exp = Thousand(exp, fn);\n  const expStr = Exp2Unit(exp);\n  if(IsNumber(unit)) unit = unitNames[unit];\n\n  let s = round(num * Math.pow(10, -exp)) + '';\n\n  if(typeof unit != 'undefined') {\n    if(IsString(expStr)) s += ' ' + expStr;\n    s += unit;\n  }\n\n  return s;\n}\n\nexport async function SetStatus(str, t1 = 3000, t2 = 1000) {\n  const st = Q('#status');\n\n  RemoveAllChildren(st);\n\n  let e = st.firstElementChild ?? document.createElement('div');\n\n  e.innerText = str;\n\n  st.insertBefore(e, st.firstElementChild);\n\n  Object.assign(e.style, { transition: 'opacity 0s' });\n  Object.assign(e.style, {\n    transition: `opacity ${t1 / 1000}s`,\n    opacity: '1'\n  });\n\n  await WaitFor(t1);\n\n  Object.assign(e.style, { transition: `all ${t2 / 1000}s`, opacity: '0' });\n\n  await WaitFor(t2);\n}\nexport function SetupFields() {\n  if(!globalThis.document) {\n    setTimeout(() => SetupFields(), 100);\n    return;\n  }\n\n  [...PartitionArray([...Q('#fields').children], NUM_FIELDS)].forEach((a, i) => {\n    a.slice(0, 2).forEach(e => e.addEventListener('click', e => SelectField(i)));\n    a.forEach(e => e.addEventListener('dblclick', async e => (await CopyToClipboard(GetField(i)), e.preventDefault()), true));\n  });\n\n  document.body.addEventListener(\n    'dblclick',\n    async e => {\n      const { target } = e;\n\n      if(target.tagName.toLowerCase() == 'input') await CopyToClipboard(target.value);\n\n      e.preventDefault();\n    },\n    true\n  );\n}\n\nexport function GetSize() {\n  return +Q('input').size;\n}\n\nexport function GetMaxSize() {\n  return Math.max(\n    ...QA('input')\n      .slice(0, 3)\n      .map(e => e.value)\n      .map(v => v.length)\n  );\n}\n\nexport function ChangeSize(sz = GetMaxSize()) {\n  QA('input')\n    .slice(0, 3)\n    .forEach((e, i) => e.setAttribute('size', sz));\n}\n\nexport function ChangePrecision(p) {\n  Q('#precision').value = p + '';\n  Q('#precision_num').value = p + '';\n\n  config.precision = p;\n\n  try {\n    CalcThompson();\n    ReadFields();\n  } catch(e) {}\n}\n\nexport function Init() {\n  if(globalThis.initialized) return;\n  globalThis.initialized = true;\n\n  QA('input')\n    .slice(0, 3)\n    .forEach((e, i) => {\n      e.addEventListener('change', OnInput, false);\n      e.addEventListener('blur', OnInput, false);\n    });\n\n  SetupFields();\n\n  Object.assign(config, LoadConfig());\n\n  Q('#precision_num').addEventListener('change', event => {\n    const { target } = event;\n    const { value } = target;\n    const p = +value;\n\n    if(!isNaN(p) && p >= 0 && p <= 9) ChangePrecision(p);\n  });\n\n  Q('#precision').addEventListener('change', event => {\n    const { target } = event;\n    const { value } = target;\n\n    ChangePrecision(+value);\n  });\n\n  QA('#precision, #precision_num').forEach(e =>\n    e.addEventListener('wheel', ({ target, deltaY }) => {\n      let x = +target.value - Math.sign(deltaY);\n\n      if(!isNaN(x) && x >= 0) ChangePrecision(+x);\n    })\n  );\n\n  if('precision' in config) {\n    Q('#precision').value = config.precision;\n    Q('#precision_num').value = config.precision;\n  }\n\n  const { L, C, f } = config;\n\n  [L, C, f].forEach((v, i) => SetField(i, IsString(v) && v != '' ? v : ''));\n\n  if('selected' in config) {\n    if(config.selected >= 0 && config.selected <= 2) SelectField(config.selected);\n    else delete config.selected;\n  }\n\n  if(GetSelected() === undefined) {\n    let f = GuessField();\n    if(!IsNumber(f) || !(f >= 0 && f <= 2)) f = 2;\n    SelectField(f);\n  }\n\n  CalcThompson();\n\n  setInterval(() => SaveConfig(), 500);\n}\n\nexport function NumericValue([num, exp]) {\n  return Math.pow(10, exp) * num;\n}\n\nexport function WaitFor(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function RemoveAllChildren(e) {\n  while(e.firstElementChild) e.removeChild(e.firstElementChild);\n}\n\nexport function* PartitionArray(a, size) {\n  for(let i = 0; i < a.length; i += size) yield a.slice(i, i + size);\n}\n\nexport function Exponent(num) {\n  return Math.floor(Math.log10(num));\n}\n\nexport function Thousand(exponent, fn = 'floor') {\n  return Math.min(21, Math.max(-24, Math[fn](exponent / 3) * 3));\n}\n\nexport function Exp2Unit(exponent, fn = 'floor') {\n  /* prettier-ignore */ switch (Thousand(exponent, fn)) {\n    case -24: return 'y';\n    case -21: return 'z';\n    case -18: return 'a';\n    case -15: return 'f';\n    case -12: return 'p';\n    case -9: return 'n';\n    case -6: return 'µ';\n    case -3: return 'm';\n    case -2: return 'c';\n    case -1: return 'd';\n    case 0: return '';\n    case 2: return 'h';\n    case 3: return 'k';\n    case 6: return 'M';\n    case 9: return 'G';\n    case 12: return 'T';\n    case 15: return 'P';\n    case 18: return 'E';\n    case 21: return 'Z';\n  }\n}\n\nexport function Unit(str) {\n  if(!IsString(str)) str = str + '';\n\n  const [num, unit = ''] = [...str.replaceAll(/\\s+/g, '').matchAll(/([-Ee.\\d]+|[^-Ee.\\d]+)/g)].map(([a]) => a);\n  let exp = null;\n\n  /* prettier-ignore */ switch (unit[0]) {\n    case 'y': exp = -24; break;\n    case 'z': exp = -21; break;\n    case 'a': exp = -18; break;\n    case 'f': exp = -15; break;\n    case 'p': exp = -12; break;\n    case 'n': exp = -9; break;\n    case '\\u00B5': case '\\u03BC': case 'u': exp = -6; break;\n    case 'm': exp = -3; break;\n    case 'c': exp = -2; break;\n    case 'd': exp = -1; break;\n    case 'h': exp = 2; break;\n    case 'k': exp = 3; break;\n    case 'M': exp = 6; break;\n    case 'G': exp = 9; break;\n    case 'T': exp = 12; break;\n    case 'P': exp = 15; break;\n    case 'E': exp = 18; break;\n    case 'Z': exp = 21; break;\n  }\n\n  return [+num, exp];\n}\n\nexport function RoundTo(prec = config.precision) {\n  return n => n.toFixed(prec).replace(/\\.(.*[^0])0*$/g, '.$1');\n}\n\nexport function IsNumber(arg) {\n  return typeof arg == 'number';\n}\n\nexport function IsString(arg) {\n  return typeof arg == 'string';\n}\n\nexport async function CopyToClipboard(str) {\n  let result = await navigator.clipboard.writeText(str);\n\n  SetStatus(`Copied: '${str}'`);\n}\n\nfunction Rect({ x, y, width, height }) {\n  return Object.setPrototypeOf({ x, y, width, height }, Rect.prototype);\n}\n\nRect.prototype[Symbol.iterator] = function* () {\n  const { x, y, width, height } = this;\n  yield* [x, y, width, height];\n};\n\nObject.defineProperties(Rect.prototype, {\n  x2: {\n    get() {\n      return this.x + this.width;\n    }\n  },\n  y2: {\n    get() {\n      return this.y + this.height;\n    }\n  }\n});\n\n/* prettier-ignore */ Object.assign(globalThis, { CalcCapacitance, CalcFrequency, CalcInductance, CalcThompson, ChangePrecision, ChangeSize, ClearValues, CoilInductance, CoilTurns, CopyToClipboard, Exp2Unit, Exponent, FieldElements, FieldIndex, FormatNumber, FormatRange, GetAttributes, GetField, GetMaxSize, GetProps, GetRange, GetSelected, GetSize, GuessField, Init, IsNumber, IsRange, IsString, LoadConfig, NumericValue, OnInput, ParseNumber, ParseRange, ParseValue, ProcessValue, ReadFields, Rect, RemoveAllChildren, RoundTo, SaveConfig, SelectField, SeriesCaps, SetField, SetRange, SetStatus, SetupFields, Thousand, Unit, WaitFor });\n/* prettier-ignore */ Object.assign(globalThis, { buffer, values, values2, validValues, allValues, config, Q, QA, GS, GA, GR, Thompson });\n",
			"file": "src/app.js",
			"file_size": 16555,
			"file_write_time": 133495766479317687,
			"settings":
			{
				"buffer_size": 16552,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1612,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIACAAAAAAAAgQIAAAAAAAAAAAAAgQIAAAAAAACCAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAAgAAAAAAAIACAAAAAAAAAAAAAAAAAAA"
				],
				[
					1614,
					1,
					"insert",
					{
						"characters": "Object.-def"
					},
					"CwAAAIECAAAAAAAAggIAAAAAAAAAAAAAggIAAAAAAACDAgAAAAAAAAAAAACDAgAAAAAAAIQCAAAAAAAAAAAAAIQCAAAAAAAAhQIAAAAAAAAAAAAAhQIAAAAAAACGAgAAAAAAAAAAAACGAgAAAAAAAIcCAAAAAAAAAAAAAIcCAAAAAAAAiAIAAAAAAAAAAAAAiAIAAAAAAACJAgAAAAAAAAAAAACJAgAAAAAAAIoCAAAAAAAAAAAAAIoCAAAAAAAAiwIAAAAAAAAAAAAAiwIAAAAAAACMAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAgAAAAAAAIECAAAAAAAAAAAAAAAAAAA"
				],
				[
					1615,
					4,
					"left_delete",
					null,
					"BAAAAIsCAAAAAAAAiwIAAAAAAAABAAAAZooCAAAAAAAAigIAAAAAAAABAAAAZYkCAAAAAAAAiQIAAAAAAAABAAAAZIgCAAAAAAAAiAIAAAAAAAABAAAALQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAgAAAAAAAIwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1616,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BgAAAIgCAAAAAAAAiQIAAAAAAAAAAAAAiQIAAAAAAACKAgAAAAAAAAAAAACKAgAAAAAAAIsCAAAAAAAAAAAAAIsCAAAAAAAAjAIAAAAAAAAAAAAAjAIAAAAAAACNAgAAAAAAAAAAAACNAgAAAAAAAI4CAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAgAAAAAAAIgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1618,
					1,
					"insert_completion",
					{
						"completion": "defineProperties($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "defineProperties(...)"
					},
					"AgAAAIgCAAAAAAAAiAIAAAAAAAAGAAAAZGVmaW5liAIAAAAAAACaAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAgAAAAAAAI4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					1619,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkCAAAAAAAAmwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAgAAAAAAAJkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1620,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAJkCAAAAAAAAmQIAAAAAAAABAAAAKJkCAAAAAAAAmQIAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaAgAAAAAAAJoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1621,
					1,
					"insert",
					{
						"characters": "Rect.prototype,"
					},
					"DwAAAJkCAAAAAAAAmgIAAAAAAAAAAAAAmgIAAAAAAACbAgAAAAAAAAAAAACbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAACeAgAAAAAAAJ8CAAAAAAAAAAAAAJ8CAAAAAAAAoAIAAAAAAAAAAAAAoAIAAAAAAAChAgAAAAAAAAAAAAChAgAAAAAAAKICAAAAAAAAAAAAAKICAAAAAAAAowIAAAAAAAAAAAAAowIAAAAAAACkAgAAAAAAAAAAAACkAgAAAAAAAKUCAAAAAAAAAAAAAKUCAAAAAAAApgIAAAAAAAAAAAAApgIAAAAAAACnAgAAAAAAAAAAAACnAgAAAAAAAKgCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAgAAAAAAAJkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1622,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgCAAAAAAAAqQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAgAAAAAAAKgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1623,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKkCAAAAAAAAqwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAgAAAAAAAKkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1624,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACsAgAAAAAAAAAAAACrAgAAAAAAAK0CAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAgAAAAAAAKoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1625,
					1,
					"insert",
					{
						"characters": "x2:"
					},
					"AwAAAK0CAAAAAAAArgIAAAAAAAAAAAAArgIAAAAAAACvAgAAAAAAAAAAAACvAgAAAAAAALACAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAgAAAAAAAK0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					1626,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALACAAAAAAAAsQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAgAAAAAAALACAAAAAAAAAAAAAAAA8L8"
				],
				[
					1627,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALECAAAAAAAAswIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxAgAAAAAAALECAAAAAAAAAAAAAAAA8L8"
				],
				[
					1628,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAALICAAAAAAAAswIAAAAAAAAAAAAAswIAAAAAAAC1AgAAAAAAAAAAAAC1AgAAAAAAALYCAAAAAAAAAAAAALYCAAAAAAAAuAIAAAAAAAAAAAAAswIAAAAAAACzAgAAAAAAAAIAAAAgILMCAAAAAAAAtwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAgAAAAAAALICAAAAAAAAAAAAAAAA8L8"
				],
				[
					1629,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAALcCAAAAAAAAuAIAAAAAAAAAAAAAuAIAAAAAAAC5AgAAAAAAAAAAAAC5AgAAAAAAALoCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3AgAAAAAAALcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1630,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALoCAAAAAAAAvAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6AgAAAAAAALoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1632,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALwCAAAAAAAAvQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AgAAAAAAALwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1633,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAL0CAAAAAAAAvwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AgAAAAAAAL0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					1634,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADDAgAAAAAAAAAAAADDAgAAAAAAAMQCAAAAAAAAAAAAAMQCAAAAAAAAyAIAAAAAAAAAAAAAvwIAAAAAAAC/AgAAAAAAAAQAAAAgICAgvwIAAAAAAADFAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AgAAAAAAAL4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					1635,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAMUCAAAAAAAAxgIAAAAAAAAAAAAAxgIAAAAAAADHAgAAAAAAAAAAAADHAgAAAAAAAMgCAAAAAAAAAAAAAMgCAAAAAAAAyQIAAAAAAAAAAAAAyQIAAAAAAADKAgAAAAAAAAAAAADKAgAAAAAAAMsCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFAgAAAAAAAMUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1636,
					1,
					"insert",
					{
						"characters": " this.w"
					},
					"BwAAAMsCAAAAAAAAzAIAAAAAAAAAAAAAzAIAAAAAAADNAgAAAAAAAAAAAADNAgAAAAAAAM4CAAAAAAAAAAAAAM4CAAAAAAAAzwIAAAAAAAAAAAAAzwIAAAAAAADQAgAAAAAAAAAAAADQAgAAAAAAANECAAAAAAAAAAAAANECAAAAAAAA0gIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAgAAAAAAAMsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1637,
					1,
					"left_delete",
					null,
					"AQAAANECAAAAAAAA0QIAAAAAAAABAAAAdw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAgAAAAAAANICAAAAAAAAAAAAAAAA8L8"
				],
				[
					1638,
					1,
					"insert",
					{
						"characters": "x+this.width;"
					},
					"DQAAANECAAAAAAAA0gIAAAAAAAAAAAAA0gIAAAAAAADTAgAAAAAAAAAAAADTAgAAAAAAANQCAAAAAAAAAAAAANQCAAAAAAAA1QIAAAAAAAAAAAAA1QIAAAAAAADWAgAAAAAAAAAAAADWAgAAAAAAANcCAAAAAAAAAAAAANcCAAAAAAAA2AIAAAAAAAAAAAAA2AIAAAAAAADZAgAAAAAAAAAAAADZAgAAAAAAANoCAAAAAAAAAAAAANoCAAAAAAAA2wIAAAAAAAAAAAAA2wIAAAAAAADcAgAAAAAAAAAAAADcAgAAAAAAAN0CAAAAAAAAAAAAAN0CAAAAAAAA3gIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRAgAAAAAAANECAAAAAAAAAAAAAAAA8L8"
				],
				[
					1647,
					1,
					"cut",
					null,
					"AQAAAK0CAAAAAAAArQIAAAAAAAA7AAAAeDI6IHsKICAgIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMueCt0aGlzLndpZHRoOwogICAgfQogIH0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAgAAAAAAAOgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1648,
					2,
					"paste",
					null,
					"AgAAAK0CAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAAAjAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAgAAAAAAAK0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					1650,
					1,
					"insert",
					{
						"characters": ",y"
					},
					"AgAAAOgCAAAAAAAA6QIAAAAAAAAAAAAA6QIAAAAAAADqAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAgAAAAAAAOgCAAAAAAAAAAAAAAAAPkA"
				],
				[
					1651,
					1,
					"right_delete",
					null,
					"AQAAAOoCAAAAAAAA6gIAAAAAAAABAAAAeA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqAgAAAAAAAOoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					1654,
					1,
					"left_delete",
					null,
					"AQAAAA0DAAAAAAAADQMAAAAAAAABAAAAeA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					1655,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAA0DAAAAAAAADgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANAwAAAAAAAA0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					1658,
					6,
					"left_delete",
					null,
					"BgAAABgDAAAAAAAAGAMAAAAAAAABAAAAaBcDAAAAAAAAFwMAAAAAAAABAAAAdBYDAAAAAAAAFgMAAAAAAAABAAAAZBUDAAAAAAAAFQMAAAAAAAABAAAAaRQDAAAAAAAAFAMAAAAAAAABAAAAdxMDAAAAAAAAEwMAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZAwAAAAAAABkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1659,
					1,
					"insert",
					{
						"characters": "he"
					},
					"AgAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1660,
					2,
					"left_delete",
					null,
					"AgAAABQDAAAAAAAAFAMAAAAAAAABAAAAZRMDAAAAAAAAEwMAAAAAAAABAAAAaA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVAwAAAAAAABUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1661,
					1,
					"insert",
					{
						"characters": ".height"
					},
					"BwAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAAVAwAAAAAAABYDAAAAAAAAAAAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1666,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaAwAAAAAAABoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1722,
					1,
					"cut",
					null,
					"AQAAAI4BAAAAAAAAjgEAAAAAAACiAQAACmZ1bmN0aW9uIFJlY3QoeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0pIHsKICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9LCBSZWN0LnByb3RvdHlwZSk7Cn0KClJlY3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiogKCkgewogIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpczsKICB5aWVsZCogW3gsIHksIHdpZHRoLCBoZWlnaHRdOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVjdC5wcm90b3R5cGUsIHsKICB4MjogewogICAgZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDsKICAgIH0KICB9LAogIHkyOiB7CiAgICBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDsKICAgIH0KICB9Cn0pOw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAQAAAAAAADADAAAAAAAAAAAAAAAA8L8"
				],
				[
					1732,
					1,
					"paste",
					null,
					"AQAAAIk7AAAAAAAAKz0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJOwAAAAAAAIk7AAAAAAAAAAAAAAAA8L8"
				],
				[
					1737,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACs9AAAAAAAALD0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArPQAAAAAAACs9AAAAAAAAAAAAAAAA8L8"
				],
				[
					1742,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsPQAAAAAAACw9AAAAAAAAAAAAAAAA8L8"
				],
				[
					1758,
					1,
					"insert",
					{
						"characters": "GR"
					},
					"AgAAAERAAAAAAAAARUAAAAAAAAAAAAAARUAAAAAAAABGQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEQAAAAAAAAERAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1759,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEZAAAAAAAAAR0AAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGQAAAAAAAAEZAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1760,
					1,
					"left_delete",
					null,
					"AQAAAEZAAAAAAAAARkAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHQAAAAAAAAEdAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1761,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEZAAAAAAAAAR0AAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGQAAAAAAAAEZAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1762,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEdAAAAAAAAASEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHQAAAAAAAAEdAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1783,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAAAA"
				],
				[
					1786,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGAAAAAAAAAEYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1805,
					3,
					"right_delete",
					null,
					"AwAAAPk/AAAAAAAA+T8AAAAAAAAFAAAAdGxpdGX5PwAAAAAAAPk/AAAAAAAAAQAAACz5PwAAAAAAAPk/AAAAAAAAAQAAACA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5PwAAAAAAAP4/AAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n\nfnu"
					},
					"BQAAAAcFAAAAAAAACAUAAAAAAAAAAAAACAUAAAAAAAAJBQAAAAAAAAAAAAAJBQAAAAAAAAoFAAAAAAAAAAAAAAoFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAAMBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcFAAAAAAAABwUAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					2,
					"left_delete",
					null,
					"AgAAAAsFAAAAAAAACwUAAAAAAAABAAAAdQoFAAAAAAAACgUAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwFAAAAAAAADAUAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "unction"
					},
					"BwAAAAoFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAAMBQAAAAAAAAAAAAAMBQAAAAAAAA0FAAAAAAAAAAAAAA0FAAAAAAAADgUAAAAAAAAAAAAADgUAAAAAAAAPBQAAAAAAAAAAAAAPBQAAAAAAABAFAAAAAAAAAAAAABAFAAAAAAAAEQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoFAAAAAAAACgUAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " C"
					},
					"AgAAABEFAAAAAAAAEgUAAAAAAAAAAAAAEgUAAAAAAAATBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEFAAAAAAAAEQUAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAABIFAAAAAAAAEgUAAAAAAAABAAAAQw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMFAAAAAAAAEwUAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAABIFAAAAAAAAEwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIFAAAAAAAAEgUAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAABIFAAAAAAAAEgUAAAAAAAABAAAAUw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMFAAAAAAAAEwUAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "SEries"
					},
					"BgAAABIFAAAAAAAAEwUAAAAAAAAAAAAAEwUAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFgUAAAAAAAAAAAAAFgUAAAAAAAAXBQAAAAAAAAAAAAAXBQAAAAAAABgFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIFAAAAAAAAEgUAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					6,
					"left_delete",
					null,
					"BgAAABcFAAAAAAAAFwUAAAAAAAABAAAAcxYFAAAAAAAAFgUAAAAAAAABAAAAZRUFAAAAAAAAFQUAAAAAAAABAAAAaRQFAAAAAAAAFAUAAAAAAAABAAAAchMFAAAAAAAAEwUAAAAAAAABAAAARRIFAAAAAAAAEgUAAAAAAAABAAAAUw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgFAAAAAAAAGAUAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "Capa"
					},
					"BAAAABIFAAAAAAAAEwUAAAAAAAAAAAAAEwUAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIFAAAAAAAAEgUAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAABUFAAAAAAAAFQUAAAAAAAABAAAAYQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYFAAAAAAAAFgUAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABUFAAAAAAAAFgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUFAAAAAAAAFQUAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABYFAAAAAAAAFwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYFAAAAAAAAFgUAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					5,
					"left_delete",
					null,
					"BQAAABYFAAAAAAAAFgUAAAAAAAABAAAAIBUFAAAAAAAAFQUAAAAAAAABAAAAcxQFAAAAAAAAFAUAAAAAAAABAAAAcBMFAAAAAAAAEwUAAAAAAAABAAAAYRIFAAAAAAAAEgUAAAAAAAABAAAAQw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcFAAAAAAAAFwUAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "SeriesCaps"
					},
					"CgAAABIFAAAAAAAAEwUAAAAAAAAAAAAAEwUAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFgUAAAAAAAAAAAAAFgUAAAAAAAAXBQAAAAAAAAAAAAAXBQAAAAAAABgFAAAAAAAAAAAAABgFAAAAAAAAGQUAAAAAAAAAAAAAGQUAAAAAAAAaBQAAAAAAAAAAAAAaBQAAAAAAABsFAAAAAAAAAAAAABsFAAAAAAAAHAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIFAAAAAAAAEgUAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABwFAAAAAAAAHgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwFAAAAAAAAHAUAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAB0FAAAAAAAAHwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0FAAAAAAAAHQUAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "values)"
					},
					"BwAAAB4FAAAAAAAAHwUAAAAAAAAAAAAAHwUAAAAAAAAgBQAAAAAAAAAAAAAgBQAAAAAAACEFAAAAAAAAAAAAACEFAAAAAAAAIgUAAAAAAAAAAAAAIgUAAAAAAAAjBQAAAAAAAAAAAAAjBQAAAAAAACQFAAAAAAAAAAAAACQFAAAAAAAAJQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4FAAAAAAAAHgUAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAACQFAAAAAAAAJAUAAAAAAAABAAAAKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUFAAAAAAAAJQUAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYFAAAAAAAAJwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYFAAAAAAAAJgUAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACcFAAAAAAAAKQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcFAAAAAAAAJwUAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"run_macro_file",
					{
						"event":
						{
							"modifier_keys":
							{
								"altgr": true
							}
						},
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AQAAACkFAAAAAAAAKgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACgFAAAAAAAAKAUAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAAqBQAAAAAAAAAAAAApBQAAAAAAACsFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACgFAAAAAAAAKAUAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "values=values.map"
					},
					"EQAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAAtBQAAAAAAAC4FAAAAAAAAAAAAAC4FAAAAAAAALwUAAAAAAAAAAAAALwUAAAAAAAAwBQAAAAAAAAAAAAAwBQAAAAAAADEFAAAAAAAAAAAAADEFAAAAAAAAMgUAAAAAAAAAAAAAMgUAAAAAAAAzBQAAAAAAAAAAAAAzBQAAAAAAADQFAAAAAAAAAAAAADQFAAAAAAAANQUAAAAAAAAAAAAANQUAAAAAAAA2BQAAAAAAAAAAAAA2BQAAAAAAADcFAAAAAAAAAAAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA5BQAAAAAAADoFAAAAAAAAAAAAADoFAAAAAAAAOwUAAAAAAAAAAAAAOwUAAAAAAAA8BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsFAAAAAAAAKwUAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADwFAAAAAAAAPgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwFAAAAAAAAPAUAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAD0FAAAAAAAAPgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0FAAAAAAAAPQUAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"left_delete",
					null,
					"AQAAAD0FAAAAAAAAPQUAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4FAAAAAAAAPgUAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAD0FAAAAAAAAPgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0FAAAAAAAAPQUAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAD4FAAAAAAAAPwUAAAAAAAAAAAAAPwUAAAAAAABABQAAAAAAAAAAAABABQAAAAAAAEEFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4FAAAAAAAAPgUAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEFAAAAAAAAQgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEFAAAAAAAAQQUAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAAEIFAAAAAAAATQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIFAAAAAAAAQgUAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE0FAAAAAAAATwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0FAAAAAAAATQUAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAE4FAAAAAAAATwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4FAAAAAAAATgUAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFEFAAAAAAAAUgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEFAAAAAAAAUQUAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFIFAAAAAAAAUwUAAAAAAAAAAAAAUwUAAAAAAABVBQAAAAAAAAAAAABVBQAAAAAAAFYFAAAAAAAAAAAAAFYFAAAAAAAAWAUAAAAAAAAAAAAAUwUAAAAAAABTBQAAAAAAAAIAAAAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIFAAAAAAAAUgUAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "values=values.map"
					},
					"EQAAAFYFAAAAAAAAVwUAAAAAAAAAAAAAVwUAAAAAAABYBQAAAAAAAAAAAABYBQAAAAAAAFkFAAAAAAAAAAAAAFkFAAAAAAAAWgUAAAAAAAAAAAAAWgUAAAAAAABbBQAAAAAAAAAAAABbBQAAAAAAAFwFAAAAAAAAAAAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAABeBQAAAAAAAF8FAAAAAAAAAAAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAABkBQAAAAAAAGUFAAAAAAAAAAAAAGUFAAAAAAAAZgUAAAAAAAAAAAAAZgUAAAAAAABnBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYFAAAAAAAAVgUAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcFAAAAAAAAaQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcFAAAAAAAAZwUAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAGgFAAAAAAAAaQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgFAAAAAAAAaAUAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAGkFAAAAAAAAagUAAAAAAAAAAAAAagUAAAAAAABrBQAAAAAAAAAAAABrBQAAAAAAAGwFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkFAAAAAAAAaQUAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " 1/f"
					},
					"BAAAAGwFAAAAAAAAbQUAAAAAAAAAAAAAbQUAAAAAAABuBQAAAAAAAAAAAABuBQAAAAAAAG8FAAAAAAAAAAAAAG8FAAAAAAAAcAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwFAAAAAAAAbAUAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHEFAAAAAAAAcgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEFAAAAAAAAcQUAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					3,
					"left_delete",
					null,
					"AwAAAHEFAAAAAAAAcQUAAAAAAAABAAAAO3AFAAAAAAAAcAUAAAAAAAABAAAAKW8FAAAAAAAAbwUAAAAAAAABAAAAZg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIFAAAAAAAAcgUAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "v);"
					},
					"AwAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAABxBQAAAAAAAAAAAABxBQAAAAAAAHIFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8FAAAAAAAAbwUAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHIFAAAAAAAAcwUAAAAAAAAAAAAAcwUAAAAAAAB1BQAAAAAAAAAAAAB1BQAAAAAAAHYFAAAAAAAAAAAAAHYFAAAAAAAAeAUAAAAAAAAAAAAAcwUAAAAAAABzBQAAAAAAAAIAAAAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIFAAAAAAAAcgUAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "values"
					},
					"BgAAAHYFAAAAAAAAdwUAAAAAAAAAAAAAdwUAAAAAAAB4BQAAAAAAAAAAAAB4BQAAAAAAAHkFAAAAAAAAAAAAAHkFAAAAAAAAegUAAAAAAAAAAAAAegUAAAAAAAB7BQAAAAAAAAAAAAB7BQAAAAAAAHwFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYFAAAAAAAAdgUAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"paste",
					null,
					"AQAAAHwFAAAAAAAAhwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwFAAAAAAAAfAUAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"paste",
					null,
					"AgAAAHYFAAAAAAAAgQUAAAAAAAAAAAAAgQUAAAAAAACBBQAAAAAAABEAAAB2YWx1ZXNQYXJzZU51bWJlcg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcFAAAAAAAAdgUAAAAAAAAAAAAAAAA0QA"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAHYFAAAAAAAAdwUAAAAAAAAAAAAAdwUAAAAAAAB3BQAAAAAAAAsAAABQYXJzZU51bWJlcncFAAAAAAAAeAUAAAAAAAAAAAAAeAUAAAAAAAB5BQAAAAAAAAAAAAB5BQAAAAAAAHoFAAAAAAAAAAAAAHoFAAAAAAAAewUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEFAAAAAAAAdgUAAAAAAAAAAAAAAAA0QA"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB9BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsFAAAAAAAAewUAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAH0FAAAAAAAAfgUAAAAAAAAAAAAAfgUAAAAAAAB/BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0FAAAAAAAAfQUAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " values.reduce"
					},
					"DgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACBBQAAAAAAAAAAAACBBQAAAAAAAIIFAAAAAAAAAAAAAIIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACEBQAAAAAAAAAAAACEBQAAAAAAAIUFAAAAAAAAAAAAAIUFAAAAAAAAhgUAAAAAAAAAAAAAhgUAAAAAAACHBQAAAAAAAAAAAACHBQAAAAAAAIgFAAAAAAAAAAAAAIgFAAAAAAAAiQUAAAAAAAAAAAAAiQUAAAAAAACKBQAAAAAAAAAAAACKBQAAAAAAAIsFAAAAAAAAAAAAAIsFAAAAAAAAjAUAAAAAAAAAAAAAjAUAAAAAAACNBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0FAAAAAAAAjgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0FAAAAAAAAjQUAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAI0FAAAAAAAAjQUAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4FAAAAAAAAjgUAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI0FAAAAAAAAjwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0FAAAAAAAAjQUAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAI4FAAAAAAAAjwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4FAAAAAAAAjgUAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAI8FAAAAAAAAkAUAAAAAAAAAAAAAkAUAAAAAAACRBQAAAAAAAAAAAACRBQAAAAAAAJIFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8FAAAAAAAAjwUAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAJIFAAAAAAAAkwUAAAAAAAAAAAAAkwUAAAAAAACUBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIFAAAAAAAAkgUAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					6,
					"left_delete",
					null,
					"BgAAAJMFAAAAAAAAkwUAAAAAAAABAAAAIJIFAAAAAAAAkgUAAAAAAAABAAAAIJEFAAAAAAAAkQUAAAAAAAABAAAAPpAFAAAAAAAAkAUAAAAAAAABAAAAPY8FAAAAAAAAjwUAAAAAAAABAAAAII4FAAAAAAAAjgUAAAAAAAABAAAAdg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQFAAAAAAAAlAUAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI4FAAAAAAAAkAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4FAAAAAAAAjgUAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAI8FAAAAAAAAkAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8FAAAAAAAAjwUAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"left_delete",
					null,
					"AQAAAI8FAAAAAAAAjwUAAAAAAAABAAAAUg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAFAAAAAAAAkAUAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAI8FAAAAAAAAkAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8FAAAAAAAAjwUAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAAI8FAAAAAAAAjwUAAAAAAAABAAAAdg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAFAAAAAAAAkAUAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "r,v"
					},
					"AwAAAI8FAAAAAAAAkAUAAAAAAAAAAAAAkAUAAAAAAACRBQAAAAAAAAAAAACRBQAAAAAAAJIFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8FAAAAAAAAjwUAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAJMFAAAAAAAAlAUAAAAAAAAAAAAAlAUAAAAAAACVBQAAAAAAAAAAAACVBQAAAAAAAJYFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMFAAAAAAAAkwUAAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "  r+"
					},
					"BAAAAJYFAAAAAAAAlwUAAAAAAAAAAAAAlwUAAAAAAACYBQAAAAAAAAAAAACYBQAAAAAAAJkFAAAAAAAAAAAAAJkFAAAAAAAAmgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYFAAAAAAAAlgUAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "v;"
					},
					"AgAAAJoFAAAAAAAAmwUAAAAAAAAAAAAAmwUAAAAAAACcBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoFAAAAAAAAmgUAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAJsFAAAAAAAAmwUAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwFAAAAAAAAnAUAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJsFAAAAAAAAnAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsFAAAAAAAAmwUAAAAAAAAAAAAAAADwvw"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAJwFAAAAAAAAnQUAAAAAAAAAAAAAnQUAAAAAAACeBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwFAAAAAAAAnAUAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJ8FAAAAAAAAoAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8FAAAAAAAAnwUAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAKAFAAAAAAAAoQUAAAAAAAAAAAAAoQUAAAAAAACjBQAAAAAAAAAAAACjBQAAAAAAAKQFAAAAAAAAAAAAAKQFAAAAAAAApQUAAAAAAAAAAAAApQUAAAAAAACmBQAAAAAAAAAAAACmBQAAAAAAAKcFAAAAAAAAAAAAAKcFAAAAAAAAqAUAAAAAAAAAAAAAqAUAAAAAAACpBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAFAAAAAAAAoAUAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAKkFAAAAAAAAqgUAAAAAAAAAAAAAqgUAAAAAAACrBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkFAAAAAAAAqQUAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKsFAAAAAAAArQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsFAAAAAAAAqwUAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAKsFAAAAAAAAqwUAAAAAAAABAAAAKKsFAAAAAAAAqwUAAAAAAAABAAAAKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwFAAAAAAAArAUAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "/N;"
					},
					"AwAAAKsFAAAAAAAArAUAAAAAAAAAAAAArAUAAAAAAACtBQAAAAAAAAAAAACtBQAAAAAAAK4FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsFAAAAAAAAqwUAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					2,
					"left_delete",
					null,
					"AgAAAK0FAAAAAAAArQUAAAAAAAABAAAAO6wFAAAAAAAArAUAAAAAAAABAAAATg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4FAAAAAAAArgUAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "n;:"
					},
					"AwAAAKwFAAAAAAAArQUAAAAAAAAAAAAArQUAAAAAAACuBQAAAAAAAAAAAACuBQAAAAAAAK8FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwFAAAAAAAArAUAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"left_delete",
					null,
					"AQAAAK4FAAAAAAAArgUAAAAAAAABAAAAOg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8FAAAAAAAArwUAAAAAAAAAAAAAAADwvw"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAACQFAAAAAAAAJQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQFAAAAAAAAJAUAAAAAAAAAAAAAAOBwQA"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"AQAAACQFAAAAAAAAJAUAAAAAAAABAAAAPQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUFAAAAAAAAJQUAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "1/"
					},
					"AgAAAEIFAAAAAAAAQwUAAAAAAAAAAAAAQwUAAAAAAABEBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIFAAAAAAAAQgUAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"left_delete",
					null,
					"AQAAAFYFAAAAAAAAVgUAAAAAAAAfAAAAICB2YWx1ZXM9dmFsdWVzLm1hcCh2ID0+IDEvdik7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYFAAAAAAAAdQUAAAAAAAAAAAAAAAAAAA"
				],
				[
					177,
					1,
					"left_delete",
					null,
					"AQAAAFMFAAAAAAAAUwUAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQFAAAAAAAAVAUAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					21,
					"right_delete",
					null,
					"FQAAAFMFAAAAAAAAUwUAAAAAAAABAAAAClMFAAAAAAAAUwUAAAAAAAABAAAAClMFAAAAAAAAUwUAAAAAAAABAAAAClMFAAAAAAAAUwUAAAAAAAABAAAAIFMFAAAAAAAAUwUAAAAAAAABAAAAIFMFAAAAAAAAUwUAAAAAAAABAAAAY1MFAAAAAAAAUwUAAAAAAAABAAAAb1MFAAAAAAAAUwUAAAAAAAABAAAAblMFAAAAAAAAUwUAAAAAAAABAAAAc1MFAAAAAAAAUwUAAAAAAAABAAAAdFMFAAAAAAAAUwUAAAAAAAABAAAAIFMFAAAAAAAAUwUAAAAAAAABAAAAblMFAAAAAAAAUwUAAAAAAAABAAAAIFMFAAAAAAAAUwUAAAAAAAABAAAAPVMFAAAAAAAAUwUAAAAAAAABAAAAIFMFAAAAAAAAUwUAAAAAAAABAAAAdlMFAAAAAAAAUwUAAAAAAAABAAAAYVMFAAAAAAAAUwUAAAAAAAABAAAAbFMFAAAAAAAAUwUAAAAAAAABAAAAdVMFAAAAAAAAUwUAAAAAAAABAAAAZVMFAAAAAAAAUwUAAAAAAAABAAAAcw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMFAAAAAAAAUwUAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "1/"
					},
					"AgAAADIFAAAAAAAAMwUAAAAAAAAAAAAAMwUAAAAAAAA0BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIFAAAAAAAAMgUAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					7,
					"right_delete",
					null,
					"BwAAACsFAAAAAAAAKwUAAAAAAAABAAAAdisFAAAAAAAAKwUAAAAAAAABAAAAYSsFAAAAAAAAKwUAAAAAAAABAAAAbCsFAAAAAAAAKwUAAAAAAAABAAAAdSsFAAAAAAAAKwUAAAAAAAABAAAAZSsFAAAAAAAAKwUAAAAAAAABAAAAcysFAAAAAAAAKwUAAAAAAAABAAAAPQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsFAAAAAAAAKwUAAAAAAAAAAAAAAAA0QA"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAAtBQAAAAAAAC4FAAAAAAAAAAAAAC4FAAAAAAAALwUAAAAAAAAAAAAALwUAAAAAAAAwBQAAAAAAAAAAAAAwBQAAAAAAADEFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsFAAAAAAAAKwUAAAAAAAAAAAAAAADwvw"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEFAAAAAAAAMgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEFAAAAAAAAMQUAAAAAAAAAAAAAAADwvw"
				],
				[
					193,
					3,
					"left_delete",
					null,
					"AwAAAHIFAAAAAAAAcgUAAAAAAAALAAAAcmV0dXJuIDEvbjtwBQAAAAAAAHAFAAAAAAAAAgAAACAgbwUAAAAAAABvBQAAAAAAAAEAAAAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIFAAAAAAAAfQUAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYFAAAAAAAAUQUAAAAAAAAAAAAAAADwvw"
				],
				[
					221,
					1,
					"",
					null,
					"AgAAANI9AAAAAAAAG0AAAAAAAAAAAAAAG0AAAAAAAAAbQAAAAAAAAGACAABDb2lsVHVybnMsIENvaWxJbmR1Y3RhbmNlLCBPbklucHV0LCBHZXRQcm9wcywgR2V0QXR0cmlidXRlcywgSXNSYW5nZSwgRmllbGRJbmRleCwgU2F2ZUNvbmZpZywgTG9hZENvbmZpZywgRmllbGRFbGVtZW50cywgR2V0RmllbGQsIFNldEZpZWxkLCBTZWxlY3RGaWVsZCwgR3Vlc3NGaWVsZCwgR2V0U2VsZWN0ZWQsIEdldFJhbmdlLCBTZXRSYW5nZSwgQ2FsY1Rob21wc29uLCBGb3JtYXRSYW5nZSwgQ2FsY0ZyZXF1ZW5jeSwgQ2FsY0luZHVjdGFuY2UsIENhbGNDYXBhY2l0YW5jZSwgQ2xlYXJWYWx1ZXMsIFByb2Nlc3NWYWx1ZSwgUGFyc2VSYW5nZSwgUGFyc2VOdW1iZXIsIFBhcnNlVmFsdWUsIFJlYWRGaWVsZHMsIEZvcm1hdE51bWJlciwgU2V0U3RhdHVzLCBTZXR1cEZpZWxkcywgR2V0U2l6ZSwgR2V0TWF4U2l6ZSwgQ2hhbmdlU2l6ZSwgQ2hhbmdlUHJlY2lzaW9uLCBJbml0LCBOdW1lcmljVmFsdWUsIFdhaXRGb3IsIFJlbW92ZUFsbENoaWxkcmVuLCBFeHBvbmVudCwgVGhvdXNhbmQsIEV4cDJVbml0LCBVbml0LCBSb3VuZFRvLCBJc051bWJlciwgSXNTdHJpbmcsIENvcHlUb0NsaXBib2FyZCwgQ29pbFR1cm5zLCBDb2lsSW5kdWN0YW5jZSwgRmllbGRFbGVtZW50cw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANI9AAAAAAAAMkAAAAAAAAAAAAAAAADwvw"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABtAAAAAAAAAHEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABtAAAAAAAAAG0AAAAAAAAAAAAAAAADwvw"
				],
				[
					227,
					2,
					"left_delete",
					null,
					"AgAAABtAAAAAAAAAG0AAAAAAAAABAAAAChpAAAAAAAAAGkAAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABxAAAAAAAAAHEAAAAAAAAAAAAAAAADwvw"
				],
				[
					237,
					1,
					"right_delete",
					null,
					"AQAAAB0FAAAAAAAAHQUAAAAAAAABAAAAWw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0FAAAAAAAAHQUAAAAAAAAAAAAAAADwvw"
				],
				[
					239,
					1,
					"right_delete",
					null,
					"AQAAACQFAAAAAAAAJAUAAAAAAAABAAAAKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQFAAAAAAAAJAUAAAAAAAAAAAAAAADwvw"
				],
				[
					240,
					1,
					"left_delete",
					null,
					"AQAAACMFAAAAAAAAIwUAAAAAAAABAAAAXQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQFAAAAAAAAJAUAAAAAAAAAAAAAAADwvw"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACMFAAAAAAAAJAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMFAAAAAAAAIwUAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "multi_layer1.js",
			"settings":
			{
				"buffer_size": 13016,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "thomson-calculator.sublime-project",
			"settings":
			{
				"buffer_size": 45,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Break every 10 lines"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/thomson-calculator",
		"/home/roman/Projects/thomson-calculator/app",
		"/home/roman/Projects/thomson-calculator/build",
		"/home/roman/Projects/thomson-calculator/e2e",
		"/home/roman/Projects/thomson-calculator/temp"
	],
	"file_history":
	[
		"/home/roman/Projects/thomson-calculator/thomson-calculator-1.0-win32-ia32.txz",
		"/home/roman/Projects/thomson-calculator/src/tlite.js",
		"/home/roman/Projects/thomson-calculator/app/app.html",
		"/home/roman/Projects/thomson-calculator/src/stylesheets/main.css",
		"/home/roman/Projects/thomson-calculator/multi_layer1.js",
		"/home/roman/Projects/thomson-calculator/src/app.js",
		"/home/roman/Projects/thomson-calculator/001.app.js.patch",
		"/home/roman/Projects/thomson-calculator/006.app.js.diff",
		"/home/roman/Projects/thomson-calculator/README.md",
		"/home/roman/Projects/thomson-calculator/app/app.js",
		"/home/roman/Projects/electron-boilerplate/app/app.html",
		"/home/roman/Projects/electron-boilerplate/src/stylesheets/main.css",
		"/home/roman/Projects/electron-boilerplate/src/main.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/electron-boilerplate/src/app.js",
		"/home/roman/Projects/electron-boilerplate/thomson-capacitance-equation-2.svg",
		"/home/roman/Projects/electron-boilerplate/thomson-freq-equation-2.svg",
		"/home/roman/Projects/electron-boilerplate/thomson-inductance-equation-2.svg",
		"/home/roman/Projects/lc-meter/lib/timer.h",
		"/home/roman/Projects/lc-meter/lib/timer.c",
		"/home/roman/Projects/lc-meter/Attic/julznc/main.c",
		"/home/roman/Projects/lc-meter/src/measure.c",
		"/home/roman/Projects/lc-meter/LC-meter.c",
		"/home/roman/Projects/pictest/src/pictest.h",
		"/home/roman/Projects/pictest/lib/typedef.h",
		"/home/roman/Projects/pictest/lib/timer.h",
		"/home/roman/Projects/pictest/lib/softpwm.c",
		"/home/roman/Projects/pictest/lib/ser.h",
		"/home/roman/Projects/pictest/lib/uart.c",
		"/home/roman/Projects/pictest/lib/uart.h",
		"/home/roman/Projects/pictest/lib/format.c",
		"/home/roman/Projects/pictest/lib/lcd5110.h",
		"/home/roman/Projects/pictest/lib/lcd5110.c",
		"/home/roman/Projects/pictest/build/sdcc.mk",
		"/home/roman/Projects/pictest/build/vars.mk",
		"/home/roman/Projects/pictest/src/serialtest.c",
		"/home/roman/Projects/pictest/pictest.sublime-project",
		"/home/roman/Projects/pictest/README.ipecmd",
		"/home/roman/Projects/pictest/src/config-18f25k50.h",
		"/home/roman/Projects/pictest/src/pictest.c",
		"/home/roman/Projects/pictest/build/xc8.mk",
		"/home/roman/Projects/pictest/lib/device.h",
		"/opt/sdcc-4.0.0/share/sdcc/non-free/include/pic16/pic18f25k50.h",
		"/home/roman/Projects/pictest/pictest.c",
		"/home/roman/Projects/pictest/pictest2.c",
		"/home/roman/Projects/pictest/serialtest.c",
		"/home/roman/Projects/pictest/Makefile",
		"/home/roman/Projects/pictest/src/7segtest.c",
		"/home/roman/Projects/pictest/src/config-bits.h",
		"/home/roman/Projects/pictest/tools/calc-midi-notes.c",
		"/home/roman/Projects/pictest/lib/softpwm.h",
		"/home/roman/Projects/pictest/lib/timer.c",
		"/home/roman/Projects/pictest/blinktest.c",
		"/home/roman/Projects/pictest/lib/softser.c",
		"/home/roman/Projects/pictest/lib/oscillator.h",
		"/home/roman/Projects/pictest/src/config-18f25k22.h",
		"/home/roman/Projects/pictest/build/common.mk",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/build/x86_64-linux-gnu/modules/repl.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/repl.js",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-inspect.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_misc.js",
		"/home/roman/Sources/plot-cv/quickjs/modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-path.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/utils.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/test-repl.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-pointer.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-predicate.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/predicate.c",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/cmake/FindQuickJS.cmake",
		"/home/roman/Sources/plot-cv/quickjs/modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/base64.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/lib/core-net/pollfd.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/test-apps/test-server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/build/x86_64-linux-gnu/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/READMEs/README.coding.md",
		"/home/roman/Projects/plot-cv/quickjs/modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-lexer.h"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 119.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Coil",
			"FormatNum",
			"tlite",
			"getBoundingClientRect",
			"GetRange",
			"GetRange,",
			"GetRange",
			"getTooltipOpts",
			"a\\.tooltip",
			"\\{\\[type\\]\\}",
			"\\bDk\\b",
			"rosaKs",
			"\\bp\\b",
			"CalcInductor",
			"CalcTurns",
			"CalcIn ",
			"\\{\\[type\\]\\}",
			"Calc01",
			"form",
			" *",
			"lM",
			"rosaKs",
			"Ks\\b",
			"\\bKs\\b",
			"Ks",
			"Dk",
			"lM",
			"rosaKm",
			"Km",
			"rosaKs",
			"padding:",
			"font-size",
			"FormatNumber",
			"RoundTo",
			"FormatNumber",
			"CalcThompson",
			"GetSize",
			"GetSize\\b",
			"ChangeSize",
			"RoundFunction\\b",
			"RoundFunction2\\b",
			"RoundFunction\\b",
			"ParseNumber\\b",
			"IsRange\\b",
			"IsRange",
			"GetFieldEle",
			"config",
			"GetFieldElements",
			"SetFieldValue\\b",
			"GetFieldValue\\b",
			"function\\s*\\*",
			"function\\*",
			"calculateInverse",
			"PI_2",
			"GetValue\\b",
			"SetField\\b",
			"SetField",
			"SetField\\b",
			"GetValue\\b",
			"ParseValue\\b",
			"ParseValue",
			"console.error",
			"^(async |)function ",
			"^function ",
			"ReadFields",
			"WriteFields",
			"SetField\\b",
			"SetField",
			"GetValue",
			"typeof ",
			"typeof ([^=]*) != 'string'",
			"typeof ([^=]*) == 'string'",
			"typeof ([^=]*) == '(.*)'",
			"typeof ([^=]*) != 'number'",
			"typeof ([^=]*) == 'number'",
			"'number'",
			"FormatNumber",
			"FormatNumber\\(",
			"FormatNumber",
			"Thousand",
			"FormatNumber",
			"SetValue",
			"\\bvalues\\b",
			"allValues",
			"FieldIndex",
			"valueIndex",
			"FieldIndex",
			"valueIndex",
			"Thousand",
			"'u'",
			"ChangePrec",
			"input.*{",
			"input ",
			"width:",
			"OnInput",
			"Init",
			"ParseNumber",
			"Capacity",
			"FormatNumber",
			"prec",
			"SetRange",
			"FormatNumber",
			"FormatNum",
			"CalcFreq",
			"SetRange",
			"SetField\\(",
			"FormatNumber\\(",
			"FormatNumber",
			"ParseValue\\(",
			"ParseValue",
			"_2PI",
			"reverse",
			"forward",
			"Thompson =",
			"Thompson",
			"FormatN",
			"\\bUnit",
			"GetValue",
			"IsRange",
			"SetValue",
			"LoadConfig",
			"\\bconfig\\b",
			"config =",
			"config = ",
			"SaveConfig",
			"LoadConfig",
			"GetValue",
			"OnInput"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			".tooltip",
			"{Number}",
			"CoilInductance",
			"CoilTurns",
			"{Number}",
			"CalcTurns",
			"RoundTo",
			"RoundFunction",
			"FieldElements",
			"SetField",
			"GetField",
			"inverse",
			"PI2",
			"export \\1function ",
			"export function ",
			"!IsString(\\1)",
			"IsString(\\1)",
			"!IsNumber(\\1)",
			"IsNumber(\\1)",
			"Capacitance",
			"\\$2PI",
			"$2PI",
			"calculateInverse",
			"calculate",
			"",
			"NUM_FIELDS",
			" config",
			" ",
			"><",
			"&nbsp;=&nbsp;",
			"ReadFields",
			"\\1//console.",
			"\\1globalThis.config"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/thomson-calculator/thomson-calculator.sublime-project",
							"function_name_status_row": 45,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1705102708.6,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "one_layer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12865,
						"regions":
						{
						},
						"selection":
						[
							[
								11540,
								12584
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 206,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1706525184.56,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4130.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16552,
						"regions":
						{
						},
						"selection":
						[
							[
								2174,
								2174
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 75,
							"rulers":
							[
							],
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1706525151.92,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": false,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 20.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "multi_layer1.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13016,
						"regions":
						{
						},
						"selection":
						[
							[
								2545,
								2596
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 35,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1706525185.14,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 257.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "thomson-calculator.sublime-project",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 45,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1706534542.42,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "blinktest_18f25k50_xc8",
	"project": "thomson-calculator.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"usb_cdc",
				"usb/USB_Stack/USB/usb_cdc.h"
			],
			[
				"blinkte",
				"src/blinktest.c"
			],
			[
				"blinktest",
				"src/blinktest.c"
			],
			[
				"pictest",
				"src/pictest.c"
			],
			[
				"blink",
				"src/blinktest.c"
			],
			[
				"format",
				"lib/format.h"
			],
			[
				"adc.h",
				"lib/adc.h"
			],
			[
				"device",
				"lib/device.h"
			],
			[
				"ipecm",
				"README.ipecmd"
			],
			[
				"makefile",
				"Makefile"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"",
				"tests/test_qjsm.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"str.h",
				"lib/str.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			],
			[
				"builtin_dum",
				"src/builtin/builtin_dump.c"
			],
			[
				"h_main",
				"src/sh/sh_main.c"
			],
			[
				"parse_cha",
				"src/parse/parse_chartable.c"
			],
			[
				"debug.h",
				"src/debug.h"
			],
			[
				"exec_c",
				"src/exec/exec_command.c"
			],
			[
				"eval.h",
				"src/eval.h"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"filesys",
				"lib/filesystem.js"
			],
			[
				"repl.",
				"repl.js"
			],
			[
				"test-str",
				"plot-cv/quickjs/modules/test-str0.c"
			],
			[
				"property-en",
				"plot-cv/quickjs/modules/property-enumeration.h"
			],
			[
				"cutil",
				"plot-cv/quickjs/cutils.c"
			],
			[
				"test-libre",
				"plot-cv/quickjs/modules/test-libregexp.c"
			],
			[
				"clang-as",
				"plot-cv/clang-ast.js"
			],
			[
				"repl",
				"plot-cv/repl.js"
			],
			[
				"consoleS",
				"plot-cv/lib/consoleSetup.js"
			],
			[
				"test-ed",
				"plot-cv/test-editline.js"
			],
			[
				"gl.js",
				"plot-cv/gl.js"
			],
			[
				"editline",
				"plot-cv/editline.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 720.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 506.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
